Interrupt Vectors
    00000 940C 021B JMP	__text_start|__start
    00024 940C 07ED JMP	_uart0_rx_isr
    0003C 940C 0851 JMP	_uart1_rx_isr

Program Code (text area)
__text_start|__start:
    0021B EFCF      LDI	R28,0xFF
    0021C E1D0      LDI	R29,0x10
    0021D BFCD      OUT	0x3D,R28
    0021E BFDE      OUT	0x3E,R29
    0021F 51CE      SUBI	R28,0x1E
    00220 40D0      SBCI	R29,0
    00221 EA0A      LDI	R16,0xAA
    00222 8308      ST	Y,R16
    00223 2400      CLR	R0
    00224 E2EF      LDI	R30,0x2F
    00225 E0F3      LDI	R31,3
    00226 E015      LDI	R17,5
    00227 37EB      CPI	R30,0x7B
    00228 07F1      CPC	R31,R17
    00229 F011      BEQ	0x022C
    0022A 9201      ST	Z+,R0
    0022B CFFB      RJMP	0x0227
    0022C 8300      ST	Z,R16
    0022D E0E7      LDI	R30,7
    0022E E0F2      LDI	R31,2
    0022F E0A0      LDI	R26,0
    00230 E0B1      LDI	R27,1
    00231 E014      LDI	R17,4
    00232 E000      LDI	R16,0
    00233 BF0B      OUT	0x3B,R16
    00234 33E6      CPI	R30,0x36
    00235 07F1      CPC	R31,R17
    00236 F021      BEQ	0x023B
    00237 95C8      LPM
    00238 9631      ADIW	R30,1
    00239 920D      ST	X+,R0
    0023A CFF9      RJMP	0x0234
    0023B 940E 0278 CALL	_main
_exit:
    0023D CFFF      RJMP	_exit
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\main.c
(0001) //DMAVR-128开发板12864型液晶显示实时时钟驱动程序
(0002) //编译环境 编译环境 ICCAVR 7.16A
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0004) //作者：阿迪 www.avrgcc.com
(0005) //日期：2010.12.112
(0006) 
(0007) //***********************************************************************
(0008) //			包含文件
(0009) //***********************************************************************
(0010) 
(0011) #include <string.h>
(0012) #include <stdio.h>
(0013) #include <macros.h>
(0014) #include <AVRdef.h>
(0015) #include <iom128v.h>
(0016) #include "DS18B20.h"    //温度传感器
(0017) #include "basic.h"      //基础函数
(0018) #include "12864time.h"  //DS1302时钟
(0019) #include "LCD.h"        //12864LCD显示屏
(0020) #include "USART.h"
(0021) #include "SYN7318.h"
(0022) #include "ESP8266.h"    
(0023) 
(0024) extern uchar RxCharBuf[16];
(0025) extern uchar RxCharNum, RxBufWr, RxBufRd;
(0026) extern uchar TxCharBuf[128];
(0027) extern uchar TxCharNum,TxStrLen;
(0028) 
(0029) extern uchar RxCharBuf_wifi[16];
(0030) extern uchar RxCharNum_wifi, RxBufWr_wifi, RxBufRd_wifi;
(0031) extern uchar TxCharBuf_wifi[128];
(0032) extern uchar TxCharNum_wifi,TxStrLen_wifi;
(0033) 
(0034)  
(0035) //****************************************************************
(0036) //  显示欢迎信息
(0037) //****************************************************************
(0038) void welcomeDisplay(void)
(0039) {
(0040)  	DisplayCgrom(0x90,"欢迎使用独居老人");
_welcomeDisplay:
    0023E E622      LDI	R18,0x62
    0023F E031      LDI	R19,1
    00240 E900      LDI	R16,0x90
    00241 940E 0789 CALL	_DisplayCgrom
(0041) 	delay_nms(100);
    00243 E604      LDI	R16,0x64
    00244 E010      LDI	R17,0
    00245 940E 070B CALL	_delay_nms
(0042) 	DisplayCgrom(0x8a,"预警系统");
    00247 E529      LDI	R18,0x59
    00248 E031      LDI	R19,1
    00249 E80A      LDI	R16,0x8A
    0024A 940E 0789 CALL	_DisplayCgrom
(0043) 	delay_nms(3000);
    0024C EB08      LDI	R16,0xB8
    0024D E01B      LDI	R17,0xB
    0024E 940E 070B CALL	_delay_nms
(0044) 	LCD_clear();                                  //清屏
    00250 940C 0783 JMP	_LCD_clear
(0045) }
(0046) 
(0047) //****************************************************************
(0048) //  显示语音模块初始化信息
(0049) //****************************************************************
(0050) void syn7318InitDisplay(void)
(0051) {
(0052)  	DisplayCgrom(0x90,"语音模块");
_syn7318InitDisplay:
    00252 E520      LDI	R18,0x50
    00253 E031      LDI	R19,1
    00254 E900      LDI	R16,0x90
    00255 940E 0789 CALL	_DisplayCgrom
(0053) 	delay_nms(100);
    00257 E604      LDI	R16,0x64
    00258 E010      LDI	R17,0
    00259 940E 070B CALL	_delay_nms
(0054) 	DisplayCgrom(0x8a,"初始化中");
    0025B E427      LDI	R18,0x47
    0025C E031      LDI	R19,1
    0025D E80A      LDI	R16,0x8A
    0025E 940E 0789 CALL	_DisplayCgrom
(0055) 	delay_nms(3000);
    00260 EB08      LDI	R16,0xB8
    00261 E01B      LDI	R17,0xB
    00262 940E 070B CALL	_delay_nms
(0056) 	LCD_clear();                                  //清屏
    00264 940C 0783 JMP	_LCD_clear
(0057) }
(0058) 
(0059) 
(0060) //call this routine to initialize all peripherals
(0061) void init_devices(void)
(0062) {
(0063)     //stop errant interrupts until set up
(0064)     CLI(); //disable all interrupts
_init_devices:
    00266 94F8      BCLR	7
(0065)     XDIV  = 0x00; //xtal divider
    00267 2422      CLR	R2
    00268 BE2C      OUT	0x3C,R2
(0066)     XMCRA = 0x00; //external memory
    00269 9220 006D STS	0x6D,R2
(0067)     UART0_Init();
    0026B 940E 07C0 CALL	_UART0_Init
(0068)     //UART1_Init();
(0069)     MCUCR = 0x00;
    0026D 2422      CLR	R2
    0026E BE25      OUT	0x35,R2
(0070)     EICRA = 0x00; //extended ext ints
    0026F 9220 006A STS	0x6A,R2
(0071)     EICRB = 0x00; //extended ext ints
    00271 BE2A      OUT	0x3A,R2
(0072)     EIMSK = 0x00;
    00272 BE29      OUT	0x39,R2
(0073)     TIMSK = 0x00; //timer interrupt sources
    00273 BE27      OUT	0x37,R2
(0074)     ETIMSK = 0x00; //extended timer interrupt sources
    00274 9220 007D STS	0x7D,R2
(0075)     SEI(); //re-enable interrupts
    00276 9478      BSET	7
    00277 9508      RET
_main:
  tempstr              --> Y,+21
  timestr              --> Y,+0
  temp                 --> R20
  command              --> R10
  u8temp               --> R20
    00278 976C      SBIW	R28,0x1C
(0076)     //all peripherals are now initialized
(0077) }
(0078) 
(0079) //***********************************************************************
(0080) //			主程序
(0081) //***********************************************************************
(0082) void main(void)
(0083) {
(0084)     // volatile unsigned char temp;
(0085) 	uchar u8temp;
(0086)     uchar command;
(0087)     uchar temp;
(0088) 	uchar timestr[21];								//时间字符串数组
(0089) 	uchar tempstr[7];								//温度字符串数组
(0090) 
(0091)     system_init();                                //系统初始化，设置IO口属性
    00279 940E 071A CALL	_system_init
(0092) 	delay_nms(100);                                //延时100ms
    0027B E604      LDI	R16,0x64
    0027C E010      LDI	R17,0
    0027D 940E 070B CALL	_delay_nms
(0093) 	LCD_init();                                   //液晶参数初始化设置
    0027F 940E 07A3 CALL	_LCD_init
(0094) 	LCD_clear();                                  //清屏
    00281 940E 0783 CALL	_LCD_clear
(0095)     
(0096) 	ds1302_init();                                //DS1302初始化
    00283 940E 0410 CALL	_ds1302_init
(0097) 	DS18B20_Reset();			        		  //复位D18B20
    00285 940E 059C CALL	_DS18B20_Reset
(0098) 	delay_nms(10);
    00287 E00A      LDI	R16,0xA
    00288 E010      LDI	R17,0
    00289 940E 070B CALL	_delay_nms
(0099) 	//ds1302_write_time();                        //向DS1302写初始数据，如年月和时间等
(0100) 	welcomeDisplay();
    0028B DFB2      RCALL	_welcomeDisplay
(0101) 	init_devices(); 
    0028C DFD9      RCALL	_init_devices
(0102) 	
(0103)     SYN7318_init();                               //SYN7318语音识别模块 初始化
    0028D 940E 0872 CALL	_SYN7318_init
(0104)     syn7318InitDisplay();
    0028F DFC2      RCALL	_syn7318InitDisplay
(0105)        
(0106) 
(0107)     //updateWords();                                //SYN7318语音识别模块 词典更新                                                 
(0108)     //SYN7318_welcome();
(0109) 
(0110)     updateWords();
    00290 940E 09B1 CALL	_updateWords
    00292 C0E6      RJMP	0x0379
(0111) 
(0112)     while(1) { 
(0113) 
(0114) 		displayDateTime();
    00293 940E 044A CALL	_displayDateTime
(0115) 		LCD_write_temperature();
    00295 940E 0655 CALL	_LCD_write_temperature
    00297 C021      RJMP	0x02B9
(0116)         
(0117)          //wifi
(0118)         while(RxBufWr_wifi != RxBufRd_wifi) {
(0119)             LCD_write_com(0x98);
    00298 E908      LDI	R16,0x98
    00299 940E 0733 CALL	_LCD_write_com
(0120)             delay_nms(2);
    0029B E002      LDI	R16,2
    0029C E010      LDI	R17,0
    0029D 940E 070B CALL	_delay_nms
(0121)             u8temp = RxCharBuf_wifi[RxBufRd_wifi];
    0029F E38A      LDI	R24,0x3A
    002A0 E093      LDI	R25,3
    002A1 91E0 0337 LDS	R30,RxBufRd_wifi
    002A3 27FF      CLR	R31
    002A4 0FE8      ADD	R30,R24
    002A5 1FF9      ADC	R31,R25
    002A6 8140      LD	R20,Z
(0122)             RxBufRd_wifi++;
    002A7 9180 0337 LDS	R24,RxBufRd_wifi
    002A9 5F8F      SUBI	R24,0xFF
    002AA 9380 0337 STS	RxBufRd_wifi,R24
(0123)             RxBufRd_wifi &= 0x0f;
    002AC 708F      ANDI	R24,0xF
    002AD 9380 0337 STS	RxBufRd_wifi,R24
(0124)             if(u8temp == 0x0d) break;
    002AF 304D      CPI	R20,0xD
    002B0 F409      BNE	0x02B2
    002B1 C00D      RJMP	0x02BF
(0125)             LCD_write_data(u8temp);
    002B2 2F04      MOV	R16,R20
    002B3 940E 0750 CALL	_LCD_write_data
(0126)             delay_nms(2);
    002B5 E002      LDI	R16,2
    002B6 E010      LDI	R17,0
    002B7 940E 070B CALL	_delay_nms
    002B9 9020 0337 LDS	R2,RxBufRd_wifi
    002BB 9030 0338 LDS	R3,RxBufWr_wifi
    002BD 1432      CP	R3,R2
    002BE F6C9      BNE	0x0298
(0127)             //DisplayCgrom(0x98, &u8temp);
(0128)         }
(0129) 
(0130) 
(0131)         startRecognition();
    002BF 940E 0A3A CALL	_startRecognition
(0132)         command = checkSendReturn();
    002C1 940E 0896 CALL	_checkSendReturn
    002C3 2EA0      MOV	R10,R16
(0133)         
(0134)         switch(command){
    002C4 2D4A      MOV	R20,R10
    002C5 2755      CLR	R21
    002C6 3041      CPI	R20,1
    002C7 E0E0      LDI	R30,0
    002C8 075E      CPC	R21,R30
    002C9 F409      BNE	0x02CB
    002CA C052      RJMP	0x031D
    002CB 3042      CPI	R20,2
    002CC E0E0      LDI	R30,0
    002CD 075E      CPC	R21,R30
    002CE F409      BNE	0x02D0
    002CF C059      RJMP	0x0329
    002D0 3043      CPI	R20,3
    002D1 E0E0      LDI	R30,0
    002D2 075E      CPC	R21,R30
    002D3 F409      BNE	0x02D5
    002D4 C0A4      RJMP	0x0379
    002D5 3044      CPI	R20,4
    002D6 E0E0      LDI	R30,0
    002D7 075E      CPC	R21,R30
    002D8 F0E1      BEQ	0x02F5
    002D9 3045      CPI	R20,5
    002DA E0E0      LDI	R30,0
    002DB 075E      CPC	R21,R30
    002DC F111      BEQ	0x02FF
    002DD 3046      CPI	R20,6
    002DE E0E0      LDI	R30,0
    002DF 075E      CPC	R21,R30
    002E0 F191      BEQ	0x0313
    002E1 3047      CPI	R20,7
    002E2 E0E0      LDI	R30,0
    002E3 075E      CPC	R21,R30
    002E4 F121      BEQ	0x0309
    002E5 3041      CPI	R20,1
    002E6 E0E0      LDI	R30,0
    002E7 075E      CPC	R21,R30
    002E8 F40C      BGE	0x02EA
    002E9 C074      RJMP	0x035E
    002EA 3644      CPI	R20,0x64
    002EB E0E0      LDI	R30,0
    002EC 075E      CPC	R21,R30
    002ED F409      BNE	0x02EF
    002EE C044      RJMP	0x0333
    002EF 3645      CPI	R20,0x65
    002F0 E0E0      LDI	R30,0
    002F1 075E      CPC	R21,R30
    002F2 F409      BNE	0x02F4
    002F3 C056      RJMP	0x034A
    002F4 C069      RJMP	0x035E
(0135)             case OVER_TIME :
(0136)                 break;
(0137)             case 0x04 :
(0138)                 //SYN7318_Error();
(0139)                 DisplayCgrom(0x88,"语音超时");
    002F5 E32E      LDI	R18,0x3E
    002F6 E031      LDI	R19,1
    002F7 E808      LDI	R16,0x88
    002F8 940E 0789 CALL	_DisplayCgrom
(0140)                 delay_nms(2);
    002FA E002      LDI	R16,2
    002FB E010      LDI	R17,0
    002FC 940E 070B CALL	_delay_nms
(0141)                 break;
    002FE C07A      RJMP	0x0379
(0142)             case 0x05 :
(0143)                 //SYN7318_Error();
(0144)                 DisplayCgrom(0x88,"识别拒识");
    002FF E325      LDI	R18,0x35
    00300 E031      LDI	R19,1
    00301 E808      LDI	R16,0x88
    00302 940E 0789 CALL	_DisplayCgrom
(0145)                 delay_nms(2);
    00304 E002      LDI	R16,2
    00305 E010      LDI	R17,0
    00306 940E 070B CALL	_delay_nms
(0146)                 break;
    00308 C070      RJMP	0x0379
(0147)             case 0x07 :
(0148)                 //SYN7318_Error();
(0149)                 DisplayCgrom(0x88,"识别拒识一");
    00309 E22A      LDI	R18,0x2A
    0030A E031      LDI	R19,1
    0030B E808      LDI	R16,0x88
    0030C 940E 0789 CALL	_DisplayCgrom
(0150)                 delay_nms(2);
    0030E E002      LDI	R16,2
    0030F E010      LDI	R17,0
    00310 940E 070B CALL	_delay_nms
(0151)                 break;
    00312 C066      RJMP	0x0379
(0152)             case 0x06 :
(0153)                 //SYN7318_Error();
(0154)                 DisplayCgrom(0x88,"识别内部错误");
    00313 E12D      LDI	R18,0x1D
    00314 E031      LDI	R19,1
    00315 E808      LDI	R16,0x88
    00316 940E 0789 CALL	_DisplayCgrom
(0155)                 delay_nms(2);
    00318 E002      LDI	R16,2
    00319 E010      LDI	R17,0
    0031A 940E 070B CALL	_delay_nms
(0156)                 break;
    0031C C05C      RJMP	0x0379
(0157)             case 1 :
(0158)                 DisplayCgrom(0x8C,"救命");
    0031D E128      LDI	R18,0x18
    0031E E031      LDI	R19,1
    0031F E80C      LDI	R16,0x8C
    00320 940E 0789 CALL	_DisplayCgrom
(0159)                 delay_nms(2);
    00322 E002      LDI	R16,2
    00323 E010      LDI	R17,0
    00324 940E 070B CALL	_delay_nms
(0160)                 //wifi_SENDMSG();
(0161)                 wifi_Restart();
    00326 940E 0A57 CALL	_wifi_Restart
(0162)                 break;
    00328 C050      RJMP	0x0379
(0163)             case 2 :
(0164)                 DisplayCgrom(0x8C,"哎呦");
    00329 E123      LDI	R18,0x13
    0032A E031      LDI	R19,1
    0032B E80C      LDI	R16,0x8C
    0032C 940E 0789 CALL	_DisplayCgrom
(0165)                 delay_nms(2);
    0032E E002      LDI	R16,2
    0032F E010      LDI	R17,0
    00330 940E 070B CALL	_delay_nms
(0166)                 break;
    00332 C046      RJMP	0x0379
(0167)             case 100 :
(0168)                 DisplayCgrom(0x8C,"温度");
    00333 E02E      LDI	R18,0xE
    00334 E031      LDI	R19,1
    00335 E80C      LDI	R16,0x8C
    00336 940E 0789 CALL	_DisplayCgrom
(0169)                 delay_nms(2);
    00338 E002      LDI	R16,2
    00339 E010      LDI	R17,0
    0033A 940E 070B CALL	_delay_nms
(0170) 				strcpy((char*)tempstr,(char*)Temperaturetostr());
    0033C 940E 069F CALL	_Temperaturetostr
    0033E 0198      MOVW	R18,R16
    0033F 018E      MOVW	R16,R28
    00340 5E0B      SUBI	R16,0xEB
    00341 4F1F      SBCI	R17,0xFF
    00342 940E 0AD6 CALL	_strcpy
(0171) 				voicePlayer(tempstr);
    00344 018E      MOVW	R16,R28
    00345 5E0B      SUBI	R16,0xEB
    00346 4F1F      SBCI	R17,0xFF
    00347 940E 090F CALL	_voicePlayer
(0172)                 break;
    00349 C02F      RJMP	0x0379
(0173) 			case 101:
(0174) 				DisplayCgrom(0x8C,"时间");
    0034A E029      LDI	R18,0x9
    0034B E031      LDI	R19,1
    0034C E80C      LDI	R16,0x8C
    0034D 940E 0789 CALL	_DisplayCgrom
(0175) 				delay_nms(2);
    0034F E002      LDI	R16,2
    00350 E010      LDI	R17,0
    00351 940E 070B CALL	_delay_nms
(0176) 				strcpy((char*)timestr,(char*)Timetostr());
    00353 940E 0532 CALL	_Timetostr
    00355 0168      MOVW	R12,R16
    00356 0196      MOVW	R18,R12
    00357 018E      MOVW	R16,R28
    00358 940E 0AD6 CALL	_strcpy
(0177) 				voicePlayer(timestr);
    0035A 018E      MOVW	R16,R28
    0035B 940E 090F CALL	_voicePlayer
(0178) 				break;
    0035D C01B      RJMP	0x0379
(0179)             default :
(0180)                 DisplayCgrom(0x8C,"识别成功");
    0035E E020      LDI	R18,0
    0035F E031      LDI	R19,1
    00360 E80C      LDI	R16,0x8C
    00361 940E 0789 CALL	_DisplayCgrom
(0181)                 delay_nms(2);
    00363 E002      LDI	R16,2
    00364 E010      LDI	R17,0
    00365 940E 070B CALL	_delay_nms
(0182)                 LCD_write_com(0x8C);
    00367 E80C      LDI	R16,0x8C
    00368 940E 0733 CALL	_LCD_write_com
(0183) 	            delay_nms(2);
    0036A E002      LDI	R16,2
    0036B E010      LDI	R17,0
    0036C 940E 070B CALL	_delay_nms
(0184)                 temp = (command >> 4) + '0';          //在LCD上写要显示的数据	
    0036E 2D4A      MOV	R20,R10
    0036F 9542      SWAP	R20
    00370 704F      ANDI	R20,0xF
    00371 5D40      SUBI	R20,0xD0
(0185)                 LCD_write_data(temp);
    00372 2F04      MOV	R16,R20
    00373 940E 0750 CALL	_LCD_write_data
(0186)                 delay_nms(2);
    00375 E002      LDI	R16,2
    00376 E010      LDI	R17,0
    00377 940E 070B CALL	_delay_nms
    00379 CF19      RJMP	0x0293
    0037A 966C      ADIW	R28,0x1C
    0037B 9508      RET
_ds1302_write_byte:
  i                    --> R20
  d                    --> R18
  addr                 --> R16
    0037C 934A      ST	-Y,R20
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\12864time.c
(0001) //DMAVR-128开发板12864型液晶显示实时时钟驱动程序
(0002) //编译环境 编译环境 ICCAVR 7.16A
(0003) //系统时钟7.3728MHZ，设置熔丝位为外部高频石英晶体振荡，启动时间4.1ms
(0004) //作者：阿迪 www.avrgcc.com
(0005) //日期：2010.12.112
(0006) 
(0007) //***********************************************************************
(0008) //			包含文件
(0009) //***********************************************************************
(0010) 
(0011) 
(0012) 
(0013) #include <iom128v.h>
(0014) #include "12864time.h"
(0015) #include "basic.h"
(0016) #include "LCD.h"
(0017) 
(0018) volatile unsigned char time_buf[8] = {0x20,0x14,0x10,0x14,0x22,0x54,0x59,0x05};
(0019) 
(0020) //***********************************************************************
(0021) //向DS1302写入一字节数据
(0022) //***********************************************************************
(0023) void ds1302_write_byte(unsigned char addr, unsigned char d) 
(0024) {
(0025) 
(0026) 	unsigned char i;
(0027) 	RST_SET;					//启动DS1302总线
    0037D 9A1F      SBI	0x03,7
(0028) 	
(0029) 	                                                //写入目标地址：addr
(0030) 	IO_OUT;
    0037E 9A16      SBI	0x02,6
(0031) 	addr = addr & 0xFE;                            //最低位置零
    0037F 7F0E      ANDI	R16,0xFE
(0032) 	for (i = 0; i < 8; i ++) {
    00380 2744      CLR	R20
    00381 C009      RJMP	0x038B
(0033) 		if (addr & 0x01) {
    00382 FF00      SBRS	R16,0
    00383 C002      RJMP	0x0386
(0034) 			IO_SET;
    00384 9A1E      SBI	0x03,6
(0035) 			}
    00385 C001      RJMP	0x0387
(0036) 		else {
(0037) 			IO_CLR;
    00386 981E      CBI	0x03,6
(0038) 			}
(0039) 		SCK_SET;
    00387 9A1D      SBI	0x03,5
(0040) 		SCK_CLR;
    00388 981D      CBI	0x03,5
(0041) 		addr = addr >> 1;
    00389 9506      LSR	R16
    0038A 9543      INC	R20
    0038B 3048      CPI	R20,0x8
    0038C F3A8      BCS	0x0382
(0042) 		}
(0043) 	
(0044) 	                                              //写入数据：d
(0045) 	IO_OUT;
    0038D 9A16      SBI	0x02,6
(0046) 	for (i = 0; i < 8; i ++) {
    0038E 2744      CLR	R20
    0038F C009      RJMP	0x0399
(0047) 		if (d & 0x01) {
    00390 FF20      SBRS	R18,0
    00391 C002      RJMP	0x0394
(0048) 			IO_SET;
    00392 9A1E      SBI	0x03,6
(0049) 			}
    00393 C001      RJMP	0x0395
(0050) 		else {
(0051) 			IO_CLR;
    00394 981E      CBI	0x03,6
(0052) 			}
(0053) 		SCK_SET;
    00395 9A1D      SBI	0x03,5
(0054) 		SCK_CLR;
    00396 981D      CBI	0x03,5
(0055) 		d = d >> 1;
    00397 9526      LSR	R18
    00398 9543      INC	R20
    00399 3048      CPI	R20,0x8
    0039A F3A8      BCS	0x0390
(0056) 		}
(0057) 	RST_CLR;					//停止DS1302总线
    0039B 981F      CBI	0x03,7
    0039C 9149      LD	R20,Y+
    0039D 9508      RET
_ds1302_read_byte:
  temp                 --> R20
  i                    --> R22
  addr                 --> R16
    0039E 934A      ST	-Y,R20
    0039F 936A      ST	-Y,R22
(0058) }
(0059) 
(0060) //***********************************************************************
(0061) //                   从DS1302读出一字节数据
(0062) //***********************************************************************
(0063) unsigned char ds1302_read_byte(unsigned char addr)
(0064)  {
(0065) 
(0066) 	unsigned char i;
(0067) 	unsigned char temp;
(0068) 	RST_SET;					//启动DS1302总线
    003A0 9A1F      SBI	0x03,7
(0069) 
(0070) 	                                                //写入目标地址：addr
(0071) 	IO_OUT;
    003A1 9A16      SBI	0x02,6
(0072) 	addr = addr | 0x01;                             //最低位置高
    003A2 6001      ORI	R16,1
(0073) 	for (i = 0; i < 8; i ++) {
    003A3 2766      CLR	R22
    003A4 C009      RJMP	0x03AE
(0074) 		if (addr & 0x01) {
    003A5 FF00      SBRS	R16,0
    003A6 C002      RJMP	0x03A9
(0075) 			IO_SET;
    003A7 9A1E      SBI	0x03,6
(0076) 			}
    003A8 C001      RJMP	0x03AA
(0077) 		else {
(0078) 			IO_CLR;
    003A9 981E      CBI	0x03,6
(0079) 			}
(0080) 		SCK_SET;
    003AA 9A1D      SBI	0x03,5
(0081) 		SCK_CLR;
    003AB 981D      CBI	0x03,5
(0082) 		addr = addr >> 1;
    003AC 9506      LSR	R16
    003AD 9563      INC	R22
    003AE 3068      CPI	R22,0x8
    003AF F3A8      BCS	0x03A5
(0083) 		}
(0084) 	
(0085) 	/*输出数据：temp*/
(0086) 	IO_IN;
    003B0 9816      CBI	0x02,6
(0087) 	for (i = 0; i < 8; i ++) {
    003B1 2766      CLR	R22
    003B2 C009      RJMP	0x03BC
(0088) 		temp = temp >> 1;
    003B3 9546      LSR	R20
(0089) 		if (IO_R) {
    003B4 9B0E      SBIS	0x01,6
    003B5 C002      RJMP	0x03B8
(0090) 			temp |= 0x80;
    003B6 6840      ORI	R20,0x80
(0091) 			}
    003B7 C001      RJMP	0x03B9
(0092) 		else {
(0093) 			temp &= 0x7F;
    003B8 774F      ANDI	R20,0x7F
(0094) 			}
(0095) 		SCK_SET;
    003B9 9A1D      SBI	0x03,5
(0096) 		SCK_CLR;
    003BA 981D      CBI	0x03,5
    003BB 9563      INC	R22
    003BC 3068      CPI	R22,0x8
    003BD F3A8      BCS	0x03B3
(0097) 		}
(0098) 	
(0099) 	RST_CLR;					//停止DS1302总线
    003BE 981F      CBI	0x03,7
(0100) 	return temp;
    003BF 2F04      MOV	R16,R20
    003C0 9169      LD	R22,Y+
    003C1 9149      LD	R20,Y+
    003C2 9508      RET
(0101) }
(0102) 
(0103) //***********************************************************************
(0104) //                   向DS302写入时钟数据
(0105) //***********************************************************************
(0106) 
(0107) void ds1302_write_time(void)
(0108)  {
(0109) 
(0110) 	ds1302_write_byte(ds1302_control_add,0x00);		//关闭写保护 
_ds1302_write_time:
    003C3 2722      CLR	R18
    003C4 E80E      LDI	R16,0x8E
    003C5 DFB6      RCALL	_ds1302_write_byte
(0111) 	ds1302_write_byte(ds1302_sec_add,0x80);			//暂停 
    003C6 E820      LDI	R18,0x80
    003C7 E800      LDI	R16,0x80
    003C8 DFB3      RCALL	_ds1302_write_byte
(0112) 	//ds1302_write_byte(ds1302_charger_add,0xa9);		//涓流充电 
(0113) 	ds1302_write_byte(ds1302_year_add,time_buf[1]);		//年 
    003C9 9120 0174 LDS	R18,time_buf+1
    003CB E80C      LDI	R16,0x8C
    003CC DFAF      RCALL	_ds1302_write_byte
(0114) 	ds1302_write_byte(ds1302_month_add,time_buf[2]);	//月 
    003CD 9120 0175 LDS	R18,time_buf+2
    003CF E808      LDI	R16,0x88
    003D0 DFAB      RCALL	_ds1302_write_byte
(0115) 	ds1302_write_byte(ds1302_date_add,time_buf[3]);		//日 
    003D1 9120 0176 LDS	R18,time_buf+3
    003D3 E806      LDI	R16,0x86
    003D4 DFA7      RCALL	_ds1302_write_byte
(0116) 	ds1302_write_byte(ds1302_day_add,time_buf[7]);		//周 
    003D5 9120 017A LDS	R18,time_buf+7
    003D7 E80A      LDI	R16,0x8A
    003D8 DFA3      RCALL	_ds1302_write_byte
(0117) 	ds1302_write_byte(ds1302_hr_add,time_buf[4]);		//时 
    003D9 9120 0177 LDS	R18,time_buf+4
    003DB E804      LDI	R16,0x84
    003DC DF9F      RCALL	_ds1302_write_byte
(0118) 	ds1302_write_byte(ds1302_min_add,time_buf[5]);		//分
    003DD 9120 0178 LDS	R18,time_buf+5
    003DF E802      LDI	R16,0x82
    003E0 DF9B      RCALL	_ds1302_write_byte
(0119) 	ds1302_write_byte(ds1302_sec_add,time_buf[6]);		//秒
    003E1 9120 0179 LDS	R18,time_buf+6
    003E3 E800      LDI	R16,0x80
    003E4 DF97      RCALL	_ds1302_write_byte
(0120) 	//ds1302_write_byte(ds1302_day_add,time_buf[7]);		//周 
(0121) 	ds1302_write_byte(ds1302_control_add,0x80);		//打开写保护 
    003E5 E820      LDI	R18,0x80
    003E6 E80E      LDI	R16,0x8E
    003E7 CF94      RJMP	_ds1302_write_byte
_ds1302_read_time:
    003E8 92AA      ST	-Y,R10
    003E9 934A      ST	-Y,R20
(0122) }
(0123) 
(0124) //***********************************************************************
(0125) //                     从DS302读出时钟数据
(0126) //***********************************************************************
(0127) 
(0128) void ds1302_read_time(void)  
(0129) { 
(0130) 
(0131) 	time_buf[1]=ds1302_read_byte(ds1302_year_add);		//年 
    003EA E80C      LDI	R16,0x8C
    003EB DFB2      RCALL	_ds1302_read_byte
    003EC 9300 0174 STS	time_buf+1,R16
(0132) 	time_buf[2]=ds1302_read_byte(ds1302_month_add);		//月 
    003EE E808      LDI	R16,0x88
    003EF DFAE      RCALL	_ds1302_read_byte
    003F0 9300 0175 STS	time_buf+2,R16
(0133) 	time_buf[3]=ds1302_read_byte(ds1302_date_add);		//日 
    003F2 E806      LDI	R16,0x86
    003F3 DFAA      RCALL	_ds1302_read_byte
    003F4 2EA0      MOV	R10,R16
    003F5 92A0 0176 STS	time_buf+3,R10
(0134) 	time_buf[4]=ds1302_read_byte(ds1302_hr_add);		//时 
    003F7 E804      LDI	R16,0x84
    003F8 DFA5      RCALL	_ds1302_read_byte
    003F9 2EA0      MOV	R10,R16
    003FA 92A0 0177 STS	time_buf+4,R10
(0135) 	time_buf[5]=ds1302_read_byte(ds1302_min_add);		//分 
    003FC E802      LDI	R16,0x82
    003FD DFA0      RCALL	_ds1302_read_byte
    003FE 2EA0      MOV	R10,R16
    003FF 92A0 0178 STS	time_buf+5,R10
(0136) 	time_buf[6]=(ds1302_read_byte(ds1302_sec_add))&0x7F;//秒 
    00401 E800      LDI	R16,0x80
    00402 DF9B      RCALL	_ds1302_read_byte
    00403 2F40      MOV	R20,R16
    00404 2F84      MOV	R24,R20
    00405 778F      ANDI	R24,0x7F
    00406 9380 0179 STS	time_buf+6,R24
(0137) 	time_buf[7]=ds1302_read_byte(ds1302_day_add);		//周 
    00408 E80A      LDI	R16,0x8A
    00409 DF94      RCALL	_ds1302_read_byte
    0040A 2EA0      MOV	R10,R16
    0040B 92A0 017A STS	time_buf+7,R10
    0040D 9149      LD	R20,Y+
    0040E 90A9      LD	R10,Y+
    0040F 9508      RET
(0138) }
(0139) 
(0140) //***********************************************************************
(0141) //               DS302初始化函数
(0142) //***********************************************************************
(0143) 
(0144) void ds1302_init(void) 
(0145) {
(0146) 	
(0147) 	RST_CLR;			//RST脚置低
_ds1302_init:
    00410 981F      CBI	0x03,7
(0148) 	SCK_CLR;			//SCK脚置低
    00411 981D      CBI	0x03,5
(0149) 	RST_OUT;			//RST脚设置为输出
    00412 9A17      SBI	0x02,7
(0150) 	SCK_OUT;			//SCK脚设置为输出
    00413 9A15      SBI	0x02,5
    00414 9508      RET
_dayToChina:
  day                  --> R20
    00415 934A      ST	-Y,R20
    00416 2F40      MOV	R20,R16
(0151) }
(0152) 
(0153) 
(0154) 
(0155) //***********************************************************************
(0156) //	数字周转中文周
(0157) //***********************************************************************
(0158) void dayToChina(unsigned char day)
(0159) {
(0160)  	    if(day == 0x01)
    00417 3041      CPI	R20,1
    00418 F429      BNE	0x041E
(0161) 	 		DisplayCgrom(0x86,"周一");
    00419 EA2E      LDI	R18,0xAE
    0041A E031      LDI	R19,1
    0041B E806      LDI	R16,0x86
    0041C 940E 0789 CALL	_DisplayCgrom
(0162) 		if(day == 0x02)
    0041E 3042      CPI	R20,2
    0041F F429      BNE	0x0425
(0163) 	 		DisplayCgrom(0x86,"周二");
    00420 EA29      LDI	R18,0xA9
    00421 E031      LDI	R19,1
    00422 E806      LDI	R16,0x86
    00423 940E 0789 CALL	_DisplayCgrom
(0164) 		if(day == 0x03)
    00425 3043      CPI	R20,3
    00426 F429      BNE	0x042C
(0165) 	 		DisplayCgrom(0x86,"周三");
    00427 EA24      LDI	R18,0xA4
    00428 E031      LDI	R19,1
    00429 E806      LDI	R16,0x86
    0042A 940E 0789 CALL	_DisplayCgrom
(0166) 		if(day == 0x04)
    0042C 3044      CPI	R20,4
    0042D F429      BNE	0x0433
(0167) 	 		DisplayCgrom(0x86,"周四");
    0042E E92F      LDI	R18,0x9F
    0042F E031      LDI	R19,1
    00430 E806      LDI	R16,0x86
    00431 940E 0789 CALL	_DisplayCgrom
(0168) 		if(day == 0x05)
    00433 3045      CPI	R20,5
    00434 F429      BNE	0x043A
(0169) 	 		DisplayCgrom(0x86,"周五");
    00435 E92A      LDI	R18,0x9A
    00436 E031      LDI	R19,1
    00437 E806      LDI	R16,0x86
    00438 940E 0789 CALL	_DisplayCgrom
(0170) 		if(day == 0x06)
    0043A 3046      CPI	R20,6
    0043B F429      BNE	0x0441
(0171) 	 		DisplayCgrom(0x86,"周六");
    0043C E925      LDI	R18,0x95
    0043D E031      LDI	R19,1
    0043E E806      LDI	R16,0x86
    0043F 940E 0789 CALL	_DisplayCgrom
(0172) 		if(day == 0x07)
    00441 3047      CPI	R20,7
    00442 F429      BNE	0x0448
(0173) 	 		DisplayCgrom(0x86,"周日");
    00443 E920      LDI	R18,0x90
    00444 E031      LDI	R19,1
    00445 E806      LDI	R16,0x86
    00446 940E 0789 CALL	_DisplayCgrom
    00448 9149      LD	R20,Y+
    00449 9508      RET
_displayDateTime:
  temp                 --> Y,+0
    0044A 9721      SBIW	R28,1
(0174) }
(0175) 
(0176) //***********************************************************************
(0177) //	显示系统时间 年月日、星期
(0178) //***********************************************************************
(0179) void displayDateTime(void)
(0180) {
(0181)  	volatile unsigned char temp;
(0182)     delay_nms(200);
    0044B EC08      LDI	R16,0xC8
    0044C E010      LDI	R17,0
    0044D 940E 070B CALL	_delay_nms
(0183) 	ds1302_read_time();                		  //读DS1302数据
    0044F DF98      RCALL	_ds1302_read_time
(0184) 		
(0185) 	LCD_write_com(0x80);
    00450 E800      LDI	R16,0x80
    00451 940E 0733 CALL	_LCD_write_com
(0186) 	delay_nms(2);
    00453 E002      LDI	R16,2
    00454 E010      LDI	R17,0
    00455 940E 070B CALL	_delay_nms
(0187)     temp = (time_buf[0] >> 4) + '0';          //在LCD上写要显示的数据	
    00457 9180 0173 LDS	R24,time_buf
    00459 9582      SWAP	R24
    0045A 708F      ANDI	R24,0xF
    0045B 5D80      SUBI	R24,0xD0
    0045C 8388      ST	Y,R24
(0188)     LCD_write_data(temp);
    0045D 2F08      MOV	R16,R24
    0045E 940E 0750 CALL	_LCD_write_data
(0189) 	delay_nms(2);
    00460 E002      LDI	R16,2
    00461 E010      LDI	R17,0
    00462 940E 070B CALL	_delay_nms
(0190) 	temp = (time_buf[0] & 0x0F) + '0';	
    00464 9180 0173 LDS	R24,time_buf
    00466 708F      ANDI	R24,0xF
    00467 5D80      SUBI	R24,0xD0
    00468 8388      ST	Y,R24
(0191) 	LCD_write_data(temp);
    00469 2F08      MOV	R16,R24
    0046A 940E 0750 CALL	_LCD_write_data
(0192) 	delay_nms(2);
    0046C E002      LDI	R16,2
    0046D E010      LDI	R17,0
    0046E 940E 070B CALL	_delay_nms
(0193) 	temp = (time_buf[1] >> 4) + '0';		
    00470 9180 0174 LDS	R24,time_buf+1
    00472 9582      SWAP	R24
    00473 708F      ANDI	R24,0xF
    00474 5D80      SUBI	R24,0xD0
    00475 8388      ST	Y,R24
(0194)     LCD_write_data(temp);
    00476 2F08      MOV	R16,R24
    00477 940E 0750 CALL	_LCD_write_data
(0195) 	delay_nms(2);
    00479 E002      LDI	R16,2
    0047A E010      LDI	R17,0
    0047B 940E 070B CALL	_delay_nms
(0196) 		 
(0197) 	temp = (time_buf[1] & 0x0F) + '0';
    0047D 9180 0174 LDS	R24,time_buf+1
    0047F 708F      ANDI	R24,0xF
    00480 5D80      SUBI	R24,0xD0
    00481 8388      ST	Y,R24
(0198) 	LCD_write_data(temp);
    00482 2F08      MOV	R16,R24
    00483 940E 0750 CALL	_LCD_write_data
(0199) 	delay_nms(2);
    00485 E002      LDI	R16,2
    00486 E010      LDI	R17,0
    00487 940E 070B CALL	_delay_nms
(0200) 	LCD_write_data('-');
    00489 E20D      LDI	R16,0x2D
    0048A 940E 0750 CALL	_LCD_write_data
(0201) 	delay_nms(2);
    0048C E002      LDI	R16,2
    0048D E010      LDI	R17,0
    0048E 940E 070B CALL	_delay_nms
(0202) 
(0203) 	temp = (time_buf[2] >> 4) + '0';		
    00490 9180 0175 LDS	R24,time_buf+2
    00492 9582      SWAP	R24
    00493 708F      ANDI	R24,0xF
    00494 5D80      SUBI	R24,0xD0
    00495 8388      ST	Y,R24
(0204)     LCD_write_data(temp);
    00496 2F08      MOV	R16,R24
    00497 940E 0750 CALL	_LCD_write_data
(0205) 	delay_nms(2);
    00499 E002      LDI	R16,2
    0049A E010      LDI	R17,0
    0049B 940E 070B CALL	_delay_nms
(0206) 	temp = (time_buf[2] & 0x0F) + '0';
    0049D 9180 0175 LDS	R24,time_buf+2
    0049F 708F      ANDI	R24,0xF
    004A0 5D80      SUBI	R24,0xD0
    004A1 8388      ST	Y,R24
(0207) 	LCD_write_data(temp);
    004A2 2F08      MOV	R16,R24
    004A3 940E 0750 CALL	_LCD_write_data
(0208) 	delay_nms(2);
    004A5 E002      LDI	R16,2
    004A6 E010      LDI	R17,0
    004A7 940E 070B CALL	_delay_nms
(0209) 	LCD_write_data('-');
    004A9 E20D      LDI	R16,0x2D
    004AA 940E 0750 CALL	_LCD_write_data
(0210) 	delay_nms(2);
    004AC E002      LDI	R16,2
    004AD E010      LDI	R17,0
    004AE 940E 070B CALL	_delay_nms
(0211) 
(0212) 	temp = (time_buf[3] >> 4) + '0';		
    004B0 9180 0176 LDS	R24,time_buf+3
    004B2 9582      SWAP	R24
    004B3 708F      ANDI	R24,0xF
    004B4 5D80      SUBI	R24,0xD0
    004B5 8388      ST	Y,R24
(0213)     LCD_write_data(temp);
    004B6 2F08      MOV	R16,R24
    004B7 940E 0750 CALL	_LCD_write_data
(0214) 	delay_nms(2);
    004B9 E002      LDI	R16,2
    004BA E010      LDI	R17,0
    004BB 940E 070B CALL	_delay_nms
(0215) 	temp = (time_buf[3] & 0x0F) + '0';
    004BD 9180 0176 LDS	R24,time_buf+3
    004BF 708F      ANDI	R24,0xF
    004C0 5D80      SUBI	R24,0xD0
    004C1 8388      ST	Y,R24
(0216) 	LCD_write_data(temp);
    004C2 2F08      MOV	R16,R24
    004C3 940E 0750 CALL	_LCD_write_data
(0217) 	delay_nms(2);
    004C5 E002      LDI	R16,2
    004C6 E010      LDI	R17,0
    004C7 940E 070B CALL	_delay_nms
(0218) 		
(0219) 	//显示星期
(0220) 	dayToChina(time_buf[7]);
    004C9 9100 017A LDS	R16,time_buf+7
    004CB DF49      RCALL	_dayToChina
(0221) 	delay_nms(2);
    004CC E002      LDI	R16,2
    004CD E010      LDI	R17,0
    004CE 940E 070B CALL	_delay_nms
(0222) 		
(0223) 
(0224) 	LCD_write_com(0x90);
    004D0 E900      LDI	R16,0x90
    004D1 940E 0733 CALL	_LCD_write_com
(0225) 	delay_nms(5);
    004D3 E005      LDI	R16,5
    004D4 E010      LDI	R17,0
    004D5 940E 070B CALL	_delay_nms
(0226) 
(0227) 	temp = (time_buf[4] >> 4) + '0';		
    004D7 9180 0177 LDS	R24,time_buf+4
    004D9 9582      SWAP	R24
    004DA 708F      ANDI	R24,0xF
    004DB 5D80      SUBI	R24,0xD0
    004DC 8388      ST	Y,R24
(0228)     LCD_write_data(temp);
    004DD 2F08      MOV	R16,R24
    004DE 940E 0750 CALL	_LCD_write_data
(0229) 	delay_nms(2);
    004E0 E002      LDI	R16,2
    004E1 E010      LDI	R17,0
    004E2 940E 070B CALL	_delay_nms
(0230) 	temp = (time_buf[4] & 0x0F) + '0';
    004E4 9180 0177 LDS	R24,time_buf+4
    004E6 708F      ANDI	R24,0xF
    004E7 5D80      SUBI	R24,0xD0
    004E8 8388      ST	Y,R24
(0231) 	LCD_write_data(temp);
    004E9 2F08      MOV	R16,R24
    004EA 940E 0750 CALL	_LCD_write_data
(0232) 	delay_nms(2);
    004EC E002      LDI	R16,2
    004ED E010      LDI	R17,0
    004EE 940E 070B CALL	_delay_nms
(0233) 	LCD_write_data(':');
    004F0 E30A      LDI	R16,0x3A
    004F1 940E 0750 CALL	_LCD_write_data
(0234) 	delay_nms(2);
    004F3 E002      LDI	R16,2
    004F4 E010      LDI	R17,0
    004F5 940E 070B CALL	_delay_nms
(0235) 
(0236) 	temp = (time_buf[5] >> 4) + '0';		
    004F7 9180 0178 LDS	R24,time_buf+5
    004F9 9582      SWAP	R24
    004FA 708F      ANDI	R24,0xF
    004FB 5D80      SUBI	R24,0xD0
    004FC 8388      ST	Y,R24
(0237)     LCD_write_data(temp);
    004FD 2F08      MOV	R16,R24
    004FE 940E 0750 CALL	_LCD_write_data
(0238) 	delay_nms(2);
    00500 E002      LDI	R16,2
    00501 E010      LDI	R17,0
    00502 940E 070B CALL	_delay_nms
(0239) 	temp = (time_buf[5] & 0x0F) + '0';
    00504 9180 0178 LDS	R24,time_buf+5
    00506 708F      ANDI	R24,0xF
    00507 5D80      SUBI	R24,0xD0
    00508 8388      ST	Y,R24
(0240) 	LCD_write_data(temp);
    00509 2F08      MOV	R16,R24
    0050A 940E 0750 CALL	_LCD_write_data
(0241) 	delay_nms(2);
    0050C E002      LDI	R16,2
    0050D E010      LDI	R17,0
    0050E 940E 070B CALL	_delay_nms
(0242) 	LCD_write_data(':');
    00510 E30A      LDI	R16,0x3A
    00511 940E 0750 CALL	_LCD_write_data
(0243) 	delay_nms(2);
    00513 E002      LDI	R16,2
    00514 E010      LDI	R17,0
    00515 940E 070B CALL	_delay_nms
(0244) 
(0245) 	temp = (time_buf[6] >> 4) + '0';		
    00517 9180 0179 LDS	R24,time_buf+6
    00519 9582      SWAP	R24
    0051A 708F      ANDI	R24,0xF
    0051B 5D80      SUBI	R24,0xD0
    0051C 8388      ST	Y,R24
(0246)     LCD_write_data(temp);
    0051D 2F08      MOV	R16,R24
    0051E 940E 0750 CALL	_LCD_write_data
(0247) 	delay_nms(2);
    00520 E002      LDI	R16,2
    00521 E010      LDI	R17,0
    00522 940E 070B CALL	_delay_nms
(0248) 	temp = (time_buf[6] & 0x0F) + '0';
    00524 9180 0179 LDS	R24,time_buf+6
    00526 708F      ANDI	R24,0xF
    00527 5D80      SUBI	R24,0xD0
    00528 8388      ST	Y,R24
(0249) 	LCD_write_data(temp);
    00529 2F08      MOV	R16,R24
    0052A 940E 0750 CALL	_LCD_write_data
(0250) 	delay_nms(2);
    0052C E002      LDI	R16,2
    0052D E010      LDI	R17,0
    0052E 940E 070B CALL	_delay_nms
    00530 9621      ADIW	R28,1
    00531 9508      RET
_Timetostr:
  str                  --> Y,+0
    00532 9765      SBIW	R28,0x15
(0251) }
(0252) 
(0253) //读取时间，保存到字符串数组中
(0254) unsigned char* Timetostr(void)
(0255) {
(0256) 	unsigned char str[21]="\0";							   //时间字符串数组
    00533 E78B      LDI	R24,0x7B
    00534 E091      LDI	R25,1
    00535 01FE      MOVW	R30,R28
    00536 E105      LDI	R16,0x15
    00537 E010      LDI	R17,0
    00538 93FA      ST	-Y,R31
    00539 93EA      ST	-Y,R30
    0053A 939A      ST	-Y,R25
    0053B 938A      ST	-Y,R24
    0053C 940E 0B8A CALL	asgnblk
(0257) 	ds1302_read_time();                		  		//读DS1302数据
    0053E DEA9      RCALL	_ds1302_read_time
(0258) 	str[0] = (time_buf[0] >> 4) + '0';
    0053F 9180 0173 LDS	R24,time_buf
    00541 9582      SWAP	R24
    00542 708F      ANDI	R24,0xF
    00543 5D80      SUBI	R24,0xD0
    00544 8388      ST	Y,R24
(0259) 	str[1] = (time_buf[0] & 0x0f) + '0';
    00545 9180 0173 LDS	R24,time_buf
    00547 708F      ANDI	R24,0xF
    00548 5D80      SUBI	R24,0xD0
    00549 8389      STD	Y+1,R24
(0260) 	str[2] = (time_buf[1] >> 4) + '0';
    0054A 9180 0174 LDS	R24,time_buf+1
    0054C 9582      SWAP	R24
    0054D 708F      ANDI	R24,0xF
    0054E 5D80      SUBI	R24,0xD0
    0054F 838A      STD	Y+2,R24
(0261) 	str[3] = (time_buf[1] & 0x0f) + '0';
    00550 9180 0174 LDS	R24,time_buf+1
    00552 708F      ANDI	R24,0xF
    00553 5D80      SUBI	R24,0xD0
    00554 838B      STD	Y+3,R24
(0262) 	str[4] = '-';
    00555 E28D      LDI	R24,0x2D
    00556 838C      STD	Y+4,R24
(0263) 	str[5] = (time_buf[2] >> 4) + '0';
    00557 9180 0175 LDS	R24,time_buf+2
    00559 9582      SWAP	R24
    0055A 708F      ANDI	R24,0xF
    0055B 5D80      SUBI	R24,0xD0
    0055C 838D      STD	Y+5,R24
(0264) 	str[6] = (time_buf[2] & 0x0f) + '0';
    0055D 9180 0175 LDS	R24,time_buf+2
    0055F 708F      ANDI	R24,0xF
    00560 5D80      SUBI	R24,0xD0
    00561 838E      STD	Y+6,R24
(0265) 	str[7] = '-';
    00562 E28D      LDI	R24,0x2D
    00563 838F      STD	Y+7,R24
(0266) 	str[8]= (time_buf[3] >> 4) + '0';
    00564 9180 0176 LDS	R24,time_buf+3
    00566 9582      SWAP	R24
    00567 708F      ANDI	R24,0xF
    00568 5D80      SUBI	R24,0xD0
    00569 8788      STD	Y+8,R24
(0267) 	str[9] = (time_buf[3] & 0x0f) + '0';
    0056A 9180 0176 LDS	R24,time_buf+3
    0056C 708F      ANDI	R24,0xF
    0056D 5D80      SUBI	R24,0xD0
    0056E 8789      STD	Y+9,R24
(0268) 	str[10] = ' '; str[11] = ' ';
    0056F E280      LDI	R24,0x20
    00570 878A      STD	Y+10,R24
    00571 878B      STD	Y+11,R24
(0269) 	str[12]= (time_buf[4] >> 4) + '0';
    00572 9180 0177 LDS	R24,time_buf+4
    00574 9582      SWAP	R24
    00575 708F      ANDI	R24,0xF
    00576 5D80      SUBI	R24,0xD0
    00577 878C      STD	Y+12,R24
(0270) 	str[13] = (time_buf[4] & 0x0f) + '0';
    00578 9180 0177 LDS	R24,time_buf+4
    0057A 708F      ANDI	R24,0xF
    0057B 5D80      SUBI	R24,0xD0
    0057C 878D      STD	Y+13,R24
(0271) 	str[14] = ':';
    0057D E38A      LDI	R24,0x3A
    0057E 878E      STD	Y+14,R24
(0272) 	str[15] = (time_buf[5] >> 4) + '0';
    0057F 9180 0178 LDS	R24,time_buf+5
    00581 9582      SWAP	R24
    00582 708F      ANDI	R24,0xF
    00583 5D80      SUBI	R24,0xD0
    00584 878F      STD	Y+15,R24
(0273) 	str[16] = (time_buf[5] & 0x0f) + '0';
    00585 9180 0178 LDS	R24,time_buf+5
    00587 708F      ANDI	R24,0xF
    00588 5D80      SUBI	R24,0xD0
    00589 8B88      STD	Y+16,R24
(0274) 	str[17] = ':';
    0058A E38A      LDI	R24,0x3A
    0058B 8B89      STD	Y+17,R24
(0275) 	str[18] = (time_buf[6] >> 4) + '0';
    0058C 9180 0179 LDS	R24,time_buf+6
    0058E 9582      SWAP	R24
    0058F 708F      ANDI	R24,0xF
    00590 5D80      SUBI	R24,0xD0
    00591 8B8A      STD	Y+18,R24
(0276) 	str[19] = (time_buf[6] & 0x0f) + '0';
    00592 9180 0179 LDS	R24,time_buf+6
    00594 708F      ANDI	R24,0xF
    00595 5D80      SUBI	R24,0xD0
    00596 8B8B      STD	Y+19,R24
(0277) 	str[20] = 0;
    00597 2422      CLR	R2
    00598 8A2C      STD	Y+20,R2
(0278) 	return str;
    00599 018E      MOVW	R16,R28
    0059A 9665      ADIW	R28,0x15
    0059B 9508      RET
_DS18B20_Reset:
  i                    --> R20
    0059C 934A      ST	-Y,R20
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\DS18B20.C
(0001) #include <iom128v.h>
(0002) #include "DS18B20.h"
(0003) #include "basic.h"
(0004) 
(0005) 
(0006) uint temp_value;
(0007) uint A1,A2,A3;
(0008) 
(0009) //************************************************************************* 
(0010) //			DS18B20初始化
(0011) //*************************************************************************
(0012) 
(0013) unsigned char DS18B20_Reset(void)                 //初始化和复位
(0014) 
(0015) {
(0016) unsigned char i;
(0017)     DQ_OUT;
    0059D 9A14      SBI	0x02,4
(0018) 	DQ_CLR;
    0059E 981C      CBI	0x03,4
(0019) 	delay_n100us(5);				//延时500uS(480-960)
    0059F E005      LDI	R16,5
    005A0 E010      LDI	R17,0
    005A1 940E 06F6 CALL	_delay_n100us
(0020) 	DQ_SET;
    005A3 9A1C      SBI	0x03,4
(0021) 	DQ_IN;
    005A4 9814      CBI	0x02,4
(0022) 	delay_n100us(1);				//延时100uS
    005A5 E001      LDI	R16,1
    005A6 E010      LDI	R17,0
    005A7 940E 06F6 CALL	_delay_n100us
(0023) 	i = DQ_R;
    005A9 B141      IN	R20,0x01
    005AA 7140      ANDI	R20,0x10
(0024) 	delay_n100us(5);				//延时500uS(保持>480uS)
    005AB E005      LDI	R16,5
    005AC E010      LDI	R17,0
    005AD 940E 06F6 CALL	_delay_n100us
(0025) 	
(0026) 	if (i) 
    005AF 2344      TST	R20
    005B0 F011      BEQ	0x05B3
(0027)         {
(0028) 		return 0x00;
    005B1 2700      CLR	R16
    005B2 C001      RJMP	0x05B4
(0029) 		
(0030)         }
(0031) 	else 
(0032)         {
(0033) 		return 0x01;
    005B3 E001      LDI	R16,1
    005B4 9149      LD	R20,Y+
    005B5 9508      RET
_DS18B20_Read_byte:
  value                --> R20
  i                    --> R22
    005B6 934A      ST	-Y,R20
    005B7 936A      ST	-Y,R22
(0034) 		
(0035)         }
(0036) 
(0037) }
(0038) 
(0039) 
(0040) //************************************************************************* 
(0041) //			DS18B20读一个字节函数
(0042) //************************************************************************* 
(0043)    
(0044) unsigned char DS18B20_Read_byte(void) 
(0045) {
(0046) 
(0047) 	unsigned char i;
(0048) 	unsigned char value = 0;
    005B8 2744      CLR	R20
(0049) 	for (i = 8; i != 0; i--) 
    005B9 E068      LDI	R22,0x8
    005BA C00F      RJMP	0x05CA
(0050)         {
(0051) 		value >>= 1;
    005BB 9546      LSR	R20
(0052) 		DQ_OUT;
    005BC 9A14      SBI	0x02,4
(0053) 		DQ_CLR;
    005BD 981C      CBI	0x03,4
(0054)         delay_10us();				//*延时10uS
    005BE 940E 06ED CALL	_delay_10us
(0055) 		
(0056) 		DQ_SET;
    005C0 9A1C      SBI	0x03,4
(0057) 		DQ_IN;
    005C1 9814      CBI	0x02,4
(0058)         delay_10us();				//*延时10uS
    005C2 940E 06ED CALL	_delay_10us
(0059) 		
(0060) 		if (DQ_R) 
    005C4 9B0C      SBIS	0x01,4
    005C5 C001      RJMP	0x05C7
(0061)                 {
(0062) 			value|=0x80;
    005C6 6840      ORI	R20,0x80
(0063) 			
(0064)                 }
(0065) 		delay_50us();			       //*延时50uS
    005C7 940E 06F0 CALL	_delay_50us
    005C9 956A      DEC	R22
    005CA 2366      TST	R22
    005CB F779      BNE	0x05BB
(0066) 		
(0067)         }
(0068) 	
(0069) 	return(value);
    005CC 2F04      MOV	R16,R20
    005CD 9169      LD	R22,Y+
    005CE 9149      LD	R20,Y+
    005CF 9508      RET
_ds1820_write_byte:
  i                    --> R20
  value                --> R10
    005D0 92AA      ST	-Y,R10
    005D1 934A      ST	-Y,R20
    005D2 2EA0      MOV	R10,R16
(0070) }
(0071) 
(0072) //************************************************************************* 
(0073) //			向18B20写一个字节函数
(0074) //*************************************************************************  
(0075) 
(0076) void ds1820_write_byte(unsigned char value) 
(0077) {
(0078) 
(0079) 	unsigned char i;
(0080) 	for (i = 8; i != 0; i--) 
    005D3 E048      LDI	R20,0x8
    005D4 C00E      RJMP	0x05E3
(0081)         {
(0082) 		DQ_OUT;
    005D5 9A14      SBI	0x02,4
(0083) 		DQ_CLR;
    005D6 981C      CBI	0x03,4
(0084)         delay_10us();				 //延时10uS
    005D7 940E 06ED CALL	_delay_10us
(0085) 		if (value & 0x01) 
    005D9 FEA0      SBRS	R10,0
    005DA C001      RJMP	0x05DC
(0086)                 {
(0087) 			DQ_SET;
    005DB 9A1C      SBI	0x03,4
(0088) 			
(0089)                 }
(0090) 		delay_n100us(1);			//延时100uS
    005DC E001      LDI	R16,1
    005DD E010      LDI	R17,0
    005DE 940E 06F6 CALL	_delay_n100us
(0091) 		DQ_SET;			        	//位结束
    005E0 9A1C      SBI	0x03,4
(0092) 		value >>= 1;
    005E1 94A6      LSR	R10
    005E2 954A      DEC	R20
    005E3 2344      TST	R20
    005E4 F781      BNE	0x05D5
    005E5 9149      LD	R20,Y+
    005E6 90A9      LD	R10,Y+
    005E7 9508      RET
(0093) 		
(0094)         }
(0095) 	
(0096) }
(0097) //*************************************************************************
(0098) //				发送温度转换命令
(0099) //************************************************************************* 
(0100) 
(0101) /*启动ds1820转换*/
(0102) void ds1820_start(void) {
(0103) 
(0104) 	DS18B20_Reset();
_ds1820_start:
    005E8 DFB3      RCALL	_DS18B20_Reset
(0105) 	ds1820_write_byte(0xCC);	
    005E9 EC0C      LDI	R16,0xCC
    005EA DFE5      RCALL	_ds1820_write_byte
(0106) 	ds1820_write_byte(0x44);	//启动转换
    005EB E404      LDI	R16,0x44
    005EC CFE3      RJMP	_ds1820_write_byte
_DS18B20_Read_temp:
  buf                  --> Y,+0
  i                    --> R20
    005ED 934A      ST	-Y,R20
    005EE 935A      ST	-Y,R21
    005EF 9729      SBIW	R28,0x9
(0107) }
(0108) 
(0109) //*************************************************************************
(0110) //				DS8B20读取温度信息
(0111) //************************************************************************* 
(0112) 
(0113) unsigned int DS18B20_Read_temp(void) 
(0114) {
(0115) 
(0116) 	unsigned int i;
(0117) 	unsigned char buf[9];
(0118) 
(0119) 	DS18B20_Reset();
    005F0 DFAB      RCALL	_DS18B20_Reset
(0120) 	ds1820_write_byte(0xCC);	
    005F1 EC0C      LDI	R16,0xCC
    005F2 DFDD      RCALL	_ds1820_write_byte
(0121) 	ds1820_write_byte(0xBE);	//读取温度
    005F3 EB0E      LDI	R16,0xBE
    005F4 DFDB      RCALL	_ds1820_write_byte
(0122) 	for (i = 0; i < 9; i++) 
    005F5 2744      CLR	R20
    005F6 2755      CLR	R21
    005F7 C008      RJMP	0x0600
(0123)      {
(0124)  	  buf[i] = DS18B20_Read_byte();	
    005F8 DFBD      RCALL	_DS18B20_Read_byte
    005F9 01CE      MOVW	R24,R28
    005FA 01FA      MOVW	R30,R20
    005FB 0FE8      ADD	R30,R24
    005FC 1FF9      ADC	R31,R25
    005FD 8300      ST	Z,R16
    005FE 5F4F      SUBI	R20,0xFF
    005FF 4F5F      SBCI	R21,0xFF
    00600 3049      CPI	R20,0x9
    00601 E0E0      LDI	R30,0
    00602 075E      CPC	R21,R30
    00603 F3A0      BCS	0x05F8
(0125)      }
(0126) 	i = buf[1];           
    00604 8149      LDD	R20,Y+1
    00605 2755      CLR	R21
(0127) 	i <<= 8;
    00606 2F54      MOV	R21,R20
    00607 2744      CLR	R20
(0128) 	i |= buf[0];
    00608 8028      LD	R2,Y
    00609 2433      CLR	R3
    0060A 2942      OR	R20,R2
    0060B 2953      OR	R21,R3
(0129) 	temp_value=i;
    0060C 9350 0336 STS	temp_value+1,R21
    0060E 9340 0335 STS	temp_value,R20
(0130)     temp_value=temp_value*0.625; //不是乘以0.0625的原因是为了把小数点后一位数据也转化为可以显示的数据
    00610 E80E      LDI	R16,0x8E
    00611 E010      LDI	R17,0
    00612 940E 0B0C CALL	elpm32
    00614 0118      MOVW	R2,R16
    00615 0129      MOVW	R4,R18
    00616 9100 0335 LDS	R16,temp_value
    00618 9110 0336 LDS	R17,temp_value+1
    0061A 940E 0BD4 CALL	uint2fp
    0061C 933A      ST	-Y,R19
    0061D 932A      ST	-Y,R18
    0061E 931A      ST	-Y,R17
    0061F 930A      ST	-Y,R16
    00620 0181      MOVW	R16,R2
    00621 0192      MOVW	R18,R4
    00622 940E 0CD7 CALL	fpmule2
    00624 940E 0BA2 CALL	fpint
    00626 9310 0336 STS	temp_value+1,R17
    00628 9300 0335 STS	temp_value,R16
(0131) 		                        //比如温度本身为27.5度，为了在后续的数据处理程序中得到BCD码，我们先放大到275
(0132)                                 //然后在显示的时候确定小数点的位置即可，就能显示出27.5度了
(0133) 	return i;
    0062A 018A      MOVW	R16,R20
    0062B 9629      ADIW	R28,0x9
    0062C 9159      LD	R21,Y+
    0062D 9149      LD	R20,Y+
    0062E 9508      RET
_data_do:
  A2t                  --> R10
  temp_d               --> R10
    0062F 92AA      ST	-Y,R10
    00630 92BA      ST	-Y,R11
    00631 0158      MOVW	R10,R16
(0134) }
(0135) 
(0136) 
(0137) 
(0138) //*************************************************************************
(0139) //		温度数据处理函数
(0140) //*************************************************************************
(0141)  void data_do(uint temp_d)
(0142)  {
(0143)      uint A2t;
(0144)      A1=temp_d/100;                       //分出百，十，和个位
    00632 E624      LDI	R18,0x64
    00633 E030      LDI	R19,0
    00634 0185      MOVW	R16,R10
    00635 940E 0AF2 CALL	div16u
    00637 9310 0334 STS	A1+1,R17
    00639 9300 0333 STS	A1,R16
(0145)      A2t=temp_d%100;
    0063B E624      LDI	R18,0x64
    0063C E030      LDI	R19,0
    0063D 0185      MOVW	R16,R10
    0063E 940E 0AF0 CALL	mod16u
    00640 0158      MOVW	R10,R16
(0146)      A2=A2t/10;
    00641 E02A      LDI	R18,0xA
    00642 E030      LDI	R19,0
    00643 940E 0AF2 CALL	div16u
    00645 9310 0332 STS	A2+1,R17
    00647 9300 0331 STS	A2,R16
(0147)      A3=A2t%10;
    00649 E02A      LDI	R18,0xA
    0064A E030      LDI	R19,0
    0064B 0185      MOVW	R16,R10
    0064C 940E 0AF0 CALL	mod16u
    0064E 9310 0330 STS	A3+1,R17
    00650 9300 032F STS	A3,R16
    00652 90B9      LD	R11,Y+
    00653 90A9      LD	R10,Y+
    00654 9508      RET
_LCD_write_temperature:
  temp                 --> Y,+0
    00655 9721      SBIW	R28,1
(0148) }
(0149) 
(0150) //*************************************************************************
(0151) //		LCD显示温度函数
(0152) //*************************************************************************
(0153) void LCD_write_temperature(void)
(0154) {
(0155)  	volatile unsigned char temp;
(0156)  	ds1820_start();		           //启动一次转换
    00656 DF91      RCALL	_ds1820_start
(0157) 	DS18B20_Read_temp();		   //读取温度数值
    00657 DF95      RCALL	_DS18B20_Read_temp
(0158)     data_do(temp_value);       	   //处理数据，得到要显示的值
    00658 9100 0335 LDS	R16,temp_value
    0065A 9110 0336 LDS	R17,temp_value+1
    0065C DFD2      RCALL	_data_do
(0159) 	
(0160) 	LCD_write_com(0x95);
    0065D E905      LDI	R16,0x95
    0065E E010      LDI	R17,0
    0065F 940E 0733 CALL	_LCD_write_com
(0161) 	delay_nms(2);
    00661 E002      LDI	R16,2
    00662 E010      LDI	R17,0
    00663 940E 070B CALL	_delay_nms
(0162)     temp = A1 + '0';          //在LCD上写温度十位
    00665 9180 0333 LDS	R24,A1
    00667 9190 0334 LDS	R25,A1+1
    00669 96C0      ADIW	R24,0x30
    0066A 8388      ST	Y,R24
(0163)     LCD_write_data(temp);
    0066B 2F08      MOV	R16,R24
    0066C 2711      CLR	R17
    0066D 940E 0750 CALL	_LCD_write_data
(0164) 	delay_nms(2);
    0066F E002      LDI	R16,2
    00670 E010      LDI	R17,0
    00671 940E 070B CALL	_delay_nms
(0165)     temp = A2 + '0';          //在LCD上写温度个位
    00673 9180 0331 LDS	R24,A2
    00675 9190 0332 LDS	R25,A2+1
    00677 96C0      ADIW	R24,0x30
    00678 8388      ST	Y,R24
(0166)     LCD_write_data(temp);
    00679 2F08      MOV	R16,R24
    0067A 2711      CLR	R17
    0067B 940E 0750 CALL	_LCD_write_data
(0167) 	delay_nms(2);
    0067D E002      LDI	R16,2
    0067E E010      LDI	R17,0
    0067F 940E 070B CALL	_delay_nms
(0168) 	LCD_write_data(0x2e); 	  //在LCD上写.号
    00681 E20E      LDI	R16,0x2E
    00682 E010      LDI	R17,0
    00683 940E 0750 CALL	_LCD_write_data
(0169) 	delay_nms(2);
    00685 E002      LDI	R16,2
    00686 E010      LDI	R17,0
    00687 940E 070B CALL	_delay_nms
(0170) 	temp = A3 + '0';          //在LCD上写温度小数位
    00689 9180 032F LDS	R24,A3
    0068B 9190 0330 LDS	R25,A3+1
    0068D 96C0      ADIW	R24,0x30
    0068E 8388      ST	Y,R24
(0171)     LCD_write_data(temp);
    0068F 2F08      MOV	R16,R24
    00690 2711      CLR	R17
    00691 940E 0750 CALL	_LCD_write_data
(0172) 	delay_nms(2);
    00693 E002      LDI	R16,2
    00694 E010      LDI	R17,0
    00695 940E 070B CALL	_delay_nms
(0173) 	DisplayCgrom(0x97,"℃");         //在LCD上写温度单位
    00697 EB2A      LDI	R18,0xBA
    00698 E031      LDI	R19,1
    00699 E907      LDI	R16,0x97
    0069A E010      LDI	R17,0
    0069B 940E 0789 CALL	_DisplayCgrom
    0069D 9621      ADIW	R28,1
    0069E 9508      RET
_Temperaturetostr:
  str                  --> Y,+0
    0069F 9727      SBIW	R28,7
(0174) 
(0175) }
(0176) 
(0177) //读取温度，保存到字符串数组中
(0178) unsigned char* Temperaturetostr(void)
(0179) {
(0180) 	unsigned char str[7]="\0";	 	//温度字符串数组
    006A0 EB83      LDI	R24,0xB3
    006A1 E091      LDI	R25,1
    006A2 01FE      MOVW	R30,R28
    006A3 E007      LDI	R16,7
    006A4 E010      LDI	R17,0
    006A5 93FA      ST	-Y,R31
    006A6 93EA      ST	-Y,R30
    006A7 939A      ST	-Y,R25
    006A8 938A      ST	-Y,R24
    006A9 940E 0B8A CALL	asgnblk
(0181) 	ds1820_start();		           //启动一次转换
    006AB DF3C      RCALL	_ds1820_start
(0182) 	DS18B20_Read_temp();		   //读取温度数值
    006AC DF40      RCALL	_DS18B20_Read_temp
(0183)     data_do(temp_value);       	   //处理数据，得到要显示的值
    006AD 9100 0335 LDS	R16,temp_value
    006AF 9110 0336 LDS	R17,temp_value+1
    006B1 DF7D      RCALL	_data_do
(0184) 	str[0] = A1 + '0';
    006B2 9180 0333 LDS	R24,A1
    006B4 9190 0334 LDS	R25,A1+1
    006B6 96C0      ADIW	R24,0x30
    006B7 8388      ST	Y,R24
(0185) 	str[1] = A2 + '0';
    006B8 9180 0331 LDS	R24,A2
    006BA 9190 0332 LDS	R25,A2+1
    006BC 96C0      ADIW	R24,0x30
    006BD 8389      STD	Y+1,R24
(0186) 	str[2]='.';
    006BE E28E      LDI	R24,0x2E
    006BF 838A      STD	Y+2,R24
(0187) 	str[3] = A3 + '0';
    006C0 9180 032F LDS	R24,A3
    006C2 9190 0330 LDS	R25,A3+1
    006C4 96C0      ADIW	R24,0x30
    006C5 838B      STD	Y+3,R24
(0188) 	strcat((char*)str, "℃");
    006C6 EB2A      LDI	R18,0xBA
    006C7 E031      LDI	R19,1
    006C8 018E      MOVW	R16,R28
    006C9 940E 0AC9 CALL	_strcat
(0189) 	str[6] = 0;
    006CB 2422      CLR	R2
    006CC 822E      STD	Y+6,R2
(0190) 	return str;
    006CD 018E      MOVW	R16,R28
    006CE 9627      ADIW	R28,7
    006CF 9508      RET
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\basic.c
(0001) 
(0002) void delay_1us(void)                 //1us延时函数，不能连续调用， 
(0003) { 
(0004)    asm("nop");                       //1时钟周期
_delay_1us:
    006D0 0000      NOP
(0005)    asm("nop");
    006D1 0000      NOP
(0006)    asm("nop");
    006D2 0000      NOP
(0007)    asm("nop");
    006D3 0000      NOP
(0008)    asm("nop");                       //1T
    006D4 0000      NOP
(0009)    asm("nop");
    006D5 0000      NOP
    006D6 9508      RET
(0010) 
(0011) }
(0012) 
(0013) void delay_3us(void)                 //3us延时函数,,可重复调用不影响精度
(0014) { 
(0015)    
(0016)    asm("nop");
_delay_3us:
    006D7 0000      NOP
(0017)    asm("nop");
    006D8 0000      NOP
(0018)    asm("nop");                       
    006D9 0000      NOP
(0019)    asm("nop");
    006DA 0000      NOP
(0020)    asm("nop");
    006DB 0000      NOP
(0021)    asm("nop");
    006DC 0000      NOP
(0022)    asm("nop");                       
    006DD 0000      NOP
(0023)    asm("nop");
    006DE 0000      NOP
(0024)    asm("nop");
    006DF 0000      NOP
(0025)    asm("nop");
    006E0 0000      NOP
(0026)    asm("nop");                       
    006E1 0000      NOP
(0027)    asm("nop");
    006E2 0000      NOP
(0028)    asm("nop");
    006E3 0000      NOP
(0029)    asm("nop");
    006E4 0000      NOP
(0030)    asm("nop");                       
    006E5 0000      NOP
(0031)    asm("nop");
    006E6 0000      NOP
(0032)    asm("nop");
    006E7 0000      NOP
(0033)    asm("nop");
    006E8 0000      NOP
(0034)    asm("nop");
    006E9 0000      NOP
(0035)    asm("nop");
    006EA 0000      NOP
(0036)    asm("nop");                       
    006EB 0000      NOP
    006EC 9508      RET
(0037) } 
(0038) 
(0039) void delay_10us(void)                 //10us延时函数,,可重复调用不影响精度
(0040) {
(0041)    delay_3us();
_delay_10us:
    006ED DFE9      RCALL	_delay_3us
(0042)    delay_3us(); 
    006EE DFE8      RCALL	_delay_3us
(0043)    delay_3us();  
    006EF CFE7      RJMP	_delay_3us
(0044) }
(0045)   
(0046) void delay_50us(void)                 //48us延时函数,,可重复调用不影响精度
(0047) { 
(0048)    delay_10us();
_delay_50us:
    006F0 DFFC      RCALL	_delay_10us
(0049)    delay_10us(); 
    006F1 DFFB      RCALL	_delay_10us
(0050)    delay_10us();
    006F2 DFFA      RCALL	_delay_10us
(0051)    delay_10us();
    006F3 CFF9      RJMP	_delay_10us
(0052) }
(0053) void delay_100us(void)     //exactly 98us延时函数,,可重复调用不影响精度
(0054) {
(0055)     delay_50us();
_delay_100us:
    006F4 DFFB      RCALL	_delay_50us
(0056)     delay_50us();
    006F5 CFFA      RJMP	_delay_50us
_delay_n100us:
  n100us               --> R20
    006F6 934A      ST	-Y,R20
    006F7 2F40      MOV	R20,R16
(0057) }
(0058) 
(0059) void delay_n100us(unsigned char n100us)
(0060) {
    006F8 C001      RJMP	0x06FA
(0061)  while(n100us--)                          
(0062)  delay_100us();
    006F9 DFFA      RCALL	_delay_100us
    006FA 2E24      MOV	R2,R20
    006FB 2433      CLR	R3
    006FC 5041      SUBI	R20,1
    006FD 2022      TST	R2
    006FE F7D1      BNE	0x06F9
    006FF 9149      LD	R20,Y+
    00700 9508      RET
(0063) }
(0064) 
(0065) 
(0066) void delay_1ms(void)
(0067) {
(0068)  delay_100us();
_delay_1ms:
    00701 DFF2      RCALL	_delay_100us
(0069)  delay_100us();
    00702 DFF1      RCALL	_delay_100us
(0070)  delay_100us();
    00703 DFF0      RCALL	_delay_100us
(0071)  delay_100us();
    00704 DFEF      RCALL	_delay_100us
(0072)  delay_100us();
    00705 DFEE      RCALL	_delay_100us
(0073)  delay_100us();
    00706 DFED      RCALL	_delay_100us
(0074)  delay_100us();
    00707 DFEC      RCALL	_delay_100us
(0075)  delay_100us();
    00708 DFEB      RCALL	_delay_100us
(0076)  delay_100us();
    00709 DFEA      RCALL	_delay_100us
(0077)  delay_100us();
    0070A CFE9      RJMP	_delay_100us
_delay_nms:
  nms                  --> R20
    0070B 934A      ST	-Y,R20
    0070C 935A      ST	-Y,R21
    0070D 01A8      MOVW	R20,R16
(0078) }
(0079) 
(0080) void delay_nms(unsigned int nms)
(0081) {
    0070E C001      RJMP	0x0710
(0082)  while(nms--) 
(0083)  delay_1ms();
    0070F DFF1      RCALL	_delay_1ms
    00710 011A      MOVW	R2,R20
    00711 5041      SUBI	R20,1
    00712 4050      SBCI	R21,0
    00713 2022      TST	R2
    00714 F7D1      BNE	0x070F
    00715 2033      TST	R3
    00716 F7C1      BNE	0x070F
    00717 9159      LD	R21,Y+
    00718 9149      LD	R20,Y+
    00719 9508      RET
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\LCD.c
(0001) #include <iom128v.h>
(0002) #include "LCD.h"
(0003) #include "basic.h"
(0004) 
(0005) //*************************************************************************
(0006) //			初始化子程序
(0007) //*************************************************************************
(0008) void system_init(void){
(0009) 
(0010) 	Data_IO = 0xFF;				        //电平设置
_system_init:
    0071A EF8F      LDI	R24,0xFF
    0071B BB8B      OUT	0x1B,R24
(0011) 	Data_DDR = 0xFF;				        //方向输出
    0071C BB8A      OUT	0x1A,R24
(0012) 
(0013) 	PORTF = 0xFF;                       //电平设置
    0071D 9380 0062 STS	0x62,R24
(0014) 	DDRF = 0xFF;                        //方向输出
    0071F 9380 0061 STS	0x61,R24
(0015)     PORTD=0xFF;
    00721 BB82      OUT	0x12,R24
(0016) 	DDRD=0xFF;
    00722 BB81      OUT	0x11,R24
(0017) 	PORTE=0xFF;                        //PSB对应于PE2
    00723 B983      OUT	0x03,R24
(0018) 	DDRE=0xfe;
    00724 EF8E      LDI	R24,0xFE
    00725 B982      OUT	0x02,R24
(0019) 	D_LE1;                             //关掉数码管，以免显示乱码                   
    00726 9A94      SBI	0x12,4
(0020)     W_LE1;                     
    00727 9A95      SBI	0x12,5
(0021)     Data_IO=0xFF;                      //关数码管            
    00728 EF8F      LDI	R24,0xFF
    00729 BB8B      OUT	0x1B,R24
(0022)     W_LE0; 
    0072A 9895      CBI	0x12,5
(0023) 	
(0024) 	PORTB=0xFF;				  		   //关闭发光二极管
    0072B BB88      OUT	0x18,R24
(0025) 	DDRB=0xFF;
    0072C BB87      OUT	0x17,R24
(0026) 
(0027) 	PSB_SET;						   //液晶并口方式
    0072D 9180 0062 LDS	R24,0x62
    0072F 6084      ORI	R24,4
    00730 9380 0062 STS	0x62,R24
    00732 9508      RET
_LCD_write_com:
  com                  --> R10
    00733 92AA      ST	-Y,R10
    00734 2EA0      MOV	R10,R16
(0028) }
(0029) 
(0030) 
(0031) //***********************************************************************
(0032) //	显示屏命令写入函数
(0033) //***********************************************************************
(0034) 
(0035) 
(0036) void LCD_write_com(unsigned char com) 
(0037) {	
(0038) 	RS_CLR;
    00735 9180 0062 LDS	R24,0x62
    00737 7F8D      ANDI	R24,0xFD
    00738 9380 0062 STS	0x62,R24
(0039) 	RW_CLR;
    0073A 9180 0062 LDS	R24,0x62
    0073C 7F8B      ANDI	R24,0xFB
    0073D 9380 0062 STS	0x62,R24
(0040) 	EN_SET;
    0073F 9180 0062 LDS	R24,0x62
    00741 6088      ORI	R24,0x8
    00742 9380 0062 STS	0x62,R24
(0041) 	Data_IO = com;
    00744 BAAB      OUT	0x1B,R10
(0042) 	delay_nms(5);
    00745 E005      LDI	R16,5
    00746 E010      LDI	R17,0
    00747 940E 070B CALL	_delay_nms
(0043) 	EN_CLR;
    00749 9180 0062 LDS	R24,0x62
    0074B 7F87      ANDI	R24,0xF7
    0074C 9380 0062 STS	0x62,R24
    0074E 90A9      LD	R10,Y+
    0074F 9508      RET
_LCD_write_data:
  data                 --> R10
    00750 92AA      ST	-Y,R10
    00751 2EA0      MOV	R10,R16
(0044) }
(0045) 
(0046) //***********************************************************************
(0047) //	显示屏数据写入函数
(0048) //***********************************************************************
(0049) 
(0050) void LCD_write_data(unsigned char data) 
(0051) {
(0052)     RS_SET;
    00752 9180 0062 LDS	R24,0x62
    00754 6082      ORI	R24,2
    00755 9380 0062 STS	0x62,R24
(0053) 	RW_CLR;
    00757 9180 0062 LDS	R24,0x62
    00759 7F8B      ANDI	R24,0xFB
    0075A 9380 0062 STS	0x62,R24
(0054) 	EN_SET;
    0075C 9180 0062 LDS	R24,0x62
    0075E 6088      ORI	R24,0x8
    0075F 9380 0062 STS	0x62,R24
(0055) 	Data_IO = data;
    00761 BAAB      OUT	0x1B,R10
(0056) 	delay_nms(5);
    00762 E005      LDI	R16,5
    00763 E010      LDI	R17,0
    00764 940E 070B CALL	_delay_nms
(0057) 	EN_CLR;
    00766 9180 0062 LDS	R24,0x62
    00768 7F87      ANDI	R24,0xF7
    00769 9380 0062 STS	0x62,R24
    0076B 90A9      LD	R10,Y+
    0076C 9508      RET
_LCD_write_char:
  data                 --> R10
  y                    --> R12
  x                    --> R20
    0076D 940E 0B58 CALL	push_xgset303C
    0076F 2EC2      MOV	R12,R18
    00770 2F40      MOV	R20,R16
    00771 80AE      LDD	R10,Y+6
(0058) }
(0059) 
(0060) //***********************************************************************
(0061) //	显示屏单字符写入函数
(0062) //***********************************************************************
(0063) 
(0064) void LCD_write_char(unsigned char x,unsigned char y,unsigned char data) 
(0065) {
(0066) 	
(0067)     if (y == 0) 
    00772 20CC      TST	R12
    00773 F421      BNE	0x0778
(0068)     {
(0069)     	LCD_write_com(0x80 + x);
    00774 2F04      MOV	R16,R20
    00775 5800      SUBI	R16,0x80
    00776 DFBC      RCALL	_LCD_write_com
(0070)     }
    00777 C003      RJMP	0x077B
(0071)     else 
(0072)     {
(0073)     	LCD_write_com(0x90 + x);
    00778 2F04      MOV	R16,R20
    00779 5700      SUBI	R16,0x70
    0077A DFB8      RCALL	_LCD_write_com
(0074)     }
(0075)     delay_nms(2);
    0077B E002      LDI	R16,2
    0077C E010      LDI	R17,0
    0077D 940E 070B CALL	_delay_nms
(0076)     LCD_write_data( data);  
    0077F 2D0A      MOV	R16,R10
    00780 DFCF      RCALL	_LCD_write_data
    00781 940C 0B5F JMP	pop_xgset303C
(0077) }
(0078) 
(0079) //***********************************************************************
(0080) //	显示屏清空显示
(0081) //***********************************************************************
(0082) 
(0083) void LCD_clear(void) 
(0084) {
(0085) 	LCD_write_com(0x01);
_LCD_clear:
    00783 E001      LDI	R16,1
    00784 DFAE      RCALL	_LCD_write_com
(0086) 	delay_nms(10);
    00785 E00A      LDI	R16,0xA
    00786 E010      LDI	R17,0
    00787 940C 070B JMP	_delay_nms
_DisplayCgrom:
  hz                   --> R20
  addr                 --> R10
    00789 940E 0B36 CALL	push_xgset300C
    0078B 01A9      MOVW	R20,R18
    0078C 2EA0      MOV	R10,R16
(0087) }
(0088) 
(0089) //***********************************************************************
(0090) //函数名称：DisplayCgrom(uchar hz)显示CGROM里的汉字
(0091) //***********************************************************************
(0092) void DisplayCgrom(uchar addr,uchar *hz)
(0093) {
(0094) 	LCD_write_com(addr);
    0078D 2D0A      MOV	R16,R10
    0078E DFA4      RCALL	_LCD_write_com
(0095)     delay_nms(5);
    0078F E005      LDI	R16,5
    00790 E010      LDI	R17,0
    00791 940E 070B CALL	_delay_nms
    00793 C009      RJMP	0x079D
(0096) 	while(*hz != '\0')
(0097) 	{
(0098) 		LCD_write_data(*hz);
    00794 01FA      MOVW	R30,R20
    00795 8100      LD	R16,Z
    00796 DFB9      RCALL	_LCD_write_data
(0099) 		hz++;
    00797 5F4F      SUBI	R20,0xFF
    00798 4F5F      SBCI	R21,0xFF
(0100)         delay_nms(5);
    00799 E005      LDI	R16,5
    0079A E010      LDI	R17,0
    0079B 940E 070B CALL	_delay_nms
    0079D 01FA      MOVW	R30,R20
    0079E 8020      LD	R2,Z
    0079F 2022      TST	R2
    007A0 F799      BNE	0x0794
    007A1 940C 0B3B JMP	pop_xgset300C
(0101) 	}
(0102) 
(0103) }
(0104) 
(0105) //***********************************************************************
(0106) //	显示屏初始化函数
(0107) //***********************************************************************
(0108) 
(0109) void LCD_init(void) 
(0110) {
(0111) 	DDRA = 0xFF;				        //I/O口方向设置
_LCD_init:
    007A3 EF8F      LDI	R24,0xFF
    007A4 BB8A      OUT	0x1A,R24
(0112) 	DDRA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
    007A5 B38A      IN	R24,0x1A
    007A6 6E80      ORI	R24,0xE0
    007A7 BB8A      OUT	0x1A,R24
(0113) 	LCD_write_com(FUN_MODE);			//显示模式设置
    007A8 E300      LDI	R16,0x30
    007A9 DF89      RCALL	_LCD_write_com
(0114) 	delay_nms(5);
    007AA E005      LDI	R16,5
    007AB E010      LDI	R17,0
    007AC 940E 070B CALL	_delay_nms
(0115) 	LCD_write_com(FUN_MODE);			//显示模式设置
    007AE E300      LDI	R16,0x30
    007AF DF83      RCALL	_LCD_write_com
(0116) 	delay_nms(5);
    007B0 E005      LDI	R16,5
    007B1 E010      LDI	R17,0
    007B2 940E 070B CALL	_delay_nms
(0117)     LCD_write_com(DISPLAY_ON);			//显示开
    007B4 E00C      LDI	R16,0xC
    007B5 DF7D      RCALL	_LCD_write_com
(0118) 	delay_nms(5);
    007B6 E005      LDI	R16,5
    007B7 E010      LDI	R17,0
    007B8 940E 070B CALL	_delay_nms
(0119)     LCD_write_com(CLEAR_SCREEN);			//清屏
    007BA E001      LDI	R16,1
    007BB DF77      RCALL	_LCD_write_com
(0120) 	delay_nms(5);
    007BC E005      LDI	R16,5
    007BD E010      LDI	R17,0
    007BE 940C 070B JMP	_delay_nms
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\USART.c
(0001) #include <iom128v.h>
(0002) #include "basic.h"
(0003) #include "USART.h"
(0004) 
(0005) 
(0006) //发送字符数组 
(0007) uchar TxCharBuf[128];
(0008) uchar TxCharNum, TxStrLen;
(0009) //接收字符数组
(0010) uchar RxCharBuf[16];
(0011) uchar RxCharNum, RxBufWr, RxBufRd;
(0012) 
(0013) //发送字符数组
(0014) uchar TxCharBuf_wifi[128];
(0015) uchar TxCharNum_wifi, TxStrLen_wifi;
(0016) //接收字符数组
(0017) uchar RxCharBuf_wifi[16];
(0018) uchar RxCharNum_wifi, RxBufWr_wifi, RxBufRd_wifi;
(0019) 
(0020) //***********************************************************************
(0021) // 串口0初始化接口函数
(0022) // 初始化uart,查询方式读写
(0023) //***********************************************************************
(0024) void UART0_Init(void)
(0025) {
(0026)     UCSR0B = 0x00;    //disable while setting baud rate
_UART0_Init:
    007C0 2422      CLR	R2
    007C1 B82A      OUT	0x0A,R2
(0027)     UCSR0C = 0x06;
    007C2 E086      LDI	R24,6
    007C3 9380 0095 STS	0x95,R24
(0028) 	UCSR0A = 0x00;
    007C5 B82B      OUT	0x0B,R2
(0029)     UBRR0H = baud_h;  //写波特率的值
    007C6 9220 0090 STS	0x90,R2
(0030)     UBRR0L = baud_l;
    007C8 E083      LDI	R24,3
    007C9 B989      OUT	0x09,R24
(0031)     UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); //发送接收使能、接收结束中断使能
    007CA E988      LDI	R24,0x98
    007CB B98A      OUT	0x0A,R24
(0032) 
(0033) 	RxBufWr = 0;
    007CC 9220 03CD STS	RxBufWr,R2
(0034) 	RxBufRd = 0;	
    007CE 9220 03CC STS	RxBufRd,R2
    007D0 9508      RET
(0035) }
(0036) 	
(0037) //***********************************************************************
(0038) // USART0发送字符串数据
(0039) //***********************************************************************
(0040) void puts0(void)
(0041) {
(0042)     for(TxCharNum = 0; TxCharNum < TxStrLen; TxCharNum++){
_puts0:
    007D1 2422      CLR	R2
    007D2 9220 03E0 STS	TxCharNum,R2
    007D4 C011      RJMP	0x07E6
(0043)         UDR0 = TxCharBuf[TxCharNum];
    007D5 EE81      LDI	R24,0xE1
    007D6 E093      LDI	R25,3
    007D7 91E0 03E0 LDS	R30,TxCharNum
    007D9 27FF      CLR	R31
    007DA 0FE8      ADD	R30,R24
    007DB 1FF9      ADC	R31,R25
    007DC 8020      LD	R2,Z
    007DD B82C      OUT	0x0C,R2
(0044)         while(!(UCSR0A & (1 << TXC0))) ;
    007DE 9B5E      SBIS	0x0B,6
    007DF CFFE      RJMP	0x07DE
(0045)         UCSR0A |= (1 << TXC0);
    007E0 9A5E      SBI	0x0B,6
    007E1 9180 03E0 LDS	R24,TxCharNum
    007E3 5F8F      SUBI	R24,0xFF
    007E4 9380 03E0 STS	TxCharNum,R24
    007E6 9020 03DF LDS	R2,TxStrLen
    007E8 9030 03E0 LDS	R3,TxCharNum
    007EA 1432      CP	R3,R2
    007EB F348      BCS	0x07D5
    007EC 9508      RET
_uart0_rx_isr:
    007ED 922A      ST	-Y,R2
    007EE 938A      ST	-Y,R24
    007EF 939A      ST	-Y,R25
    007F0 93EA      ST	-Y,R30
    007F1 93FA      ST	-Y,R31
    007F2 B62F      IN	R2,0x3F
    007F3 922A      ST	-Y,R2
(0046)     }
(0047)     //UDR0 = 0x0d;
(0048)     //while(!(UCSR0A & (1 << TXC0))) ;
(0049)     //UCSR0A |= (1 << TXC0);
(0050) }
(0051) 
(0052) //***********************************************************************
(0053) // USART0中断接收字符串
(0054) //***********************************************************************
(0055) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0056) void uart0_rx_isr(void)
(0057) {
(0058)     RxCharBuf[RxBufWr] = UDR0;  //从数据缓冲器中接收数据
    007F4 EC8F      LDI	R24,0xCF
    007F5 E093      LDI	R25,3
    007F6 91E0 03CD LDS	R30,RxBufWr
    007F8 27FF      CLR	R31
    007F9 0FE8      ADD	R30,R24
    007FA 1FF9      ADC	R31,R25
    007FB B02C      IN	R2,0x0C
    007FC 8220      ST	Z,R2
(0059) 	RxBufWr++;
    007FD 9180 03CD LDS	R24,RxBufWr
    007FF 5F8F      SUBI	R24,0xFF
    00800 9380 03CD STS	RxBufWr,R24
(0060)  	RxBufWr &= 0x0f;            //16->0
    00802 708F      ANDI	R24,0xF
    00803 9380 03CD STS	RxBufWr,R24
    00805 9029      LD	R2,Y+
    00806 BE2F      OUT	0x3F,R2
    00807 91F9      LD	R31,Y+
    00808 91E9      LD	R30,Y+
    00809 9199      LD	R25,Y+
    0080A 9189      LD	R24,Y+
    0080B 9029      LD	R2,Y+
    0080C 9518      RETI
(0061) }
(0062) 
(0063) 
(0064) //************************************************************UART1 WIFI_ESP8266*********************************************************************
(0065) //***************************************************************************************************************************************************
(0066) // 串口1初始化接口函数
(0067) // 初始化uart,查询方式读写
(0068) //***********************************************************************
(0069) void UART1_Init(void)
(0070) {
(0071)     UCSR1B = 0x00;    //disable while setting baud rate
_UART1_Init:
    0080D 2422      CLR	R2
    0080E 9220 009A STS	0x9A,R2
(0072)     UCSR1C = 0x06;
    00810 E086      LDI	R24,6
    00811 9380 009D STS	0x9D,R24
(0073) 	UCSR1A = 0x00;
    00813 9220 009B STS	0x9B,R2
(0074)     UBRR1H = baud_h;  //写波特率的值
    00815 9220 0098 STS	0x98,R2
(0075)     UBRR1L = baud_l;
    00817 E083      LDI	R24,3
    00818 9380 0099 STS	0x99,R24
(0076)     UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1); //发送接收使能、接收结束中断使能
    0081A E988      LDI	R24,0x98
    0081B 9380 009A STS	0x9A,R24
(0077) 
(0078) 	RxBufWr_wifi = 0;
    0081D 9220 0338 STS	RxBufWr_wifi,R2
(0079) 	RxBufRd_wifi = 0;	
    0081F 9220 0337 STS	RxBufRd_wifi,R2
    00821 9508      RET
(0080) }
(0081) 	
(0082) //***********************************************************************
(0083) // USART1发送字符串数据
(0084) //***********************************************************************
(0085) void puts1(void)
(0086) {
(0087)     for(TxCharNum_wifi = 0; TxCharNum_wifi < TxStrLen_wifi; TxCharNum_wifi++){
_puts1:
    00822 2422      CLR	R2
    00823 9220 034B STS	TxCharNum_wifi,R2
    00825 C018      RJMP	0x083E
(0088)         UDR1 = TxCharBuf_wifi[TxCharNum_wifi];
    00826 E48C      LDI	R24,0x4C
    00827 E093      LDI	R25,3
    00828 91E0 034B LDS	R30,TxCharNum_wifi
    0082A 27FF      CLR	R31
    0082B 0FE8      ADD	R30,R24
    0082C 1FF9      ADC	R31,R25
    0082D 8020      LD	R2,Z
    0082E 9220 009C STS	0x9C,R2
(0089)         while(!(UCSR1A & (1 << TXC1))) ;   //等待发送完成
    00830 9020 009B LDS	R2,0x9B
    00832 FE26      SBRS	R2,6
    00833 CFFC      RJMP	0x0830
(0090)         UCSR1A |= (1 << TXC1);             //发送完成标志置位
    00834 9180 009B LDS	R24,0x9B
    00836 6480      ORI	R24,0x40
    00837 9380 009B STS	0x9B,R24
    00839 9180 034B LDS	R24,TxCharNum_wifi
    0083B 5F8F      SUBI	R24,0xFF
    0083C 9380 034B STS	TxCharNum_wifi,R24
    0083E 9020 034A LDS	R2,TxStrLen_wifi
    00840 9030 034B LDS	R3,TxCharNum_wifi
    00842 1432      CP	R3,R2
    00843 F310      BCS	0x0826
(0091)     }
(0092)     UDR1 = 0x0d;
    00844 E08D      LDI	R24,0xD
    00845 9380 009C STS	0x9C,R24
(0093)     while(!(UCSR1A & (1 << TXC1))) ;
    00847 9020 009B LDS	R2,0x9B
    00849 FE26      SBRS	R2,6
    0084A CFFC      RJMP	0x0847
(0094)     UCSR1A |= (1 << TXC1);
    0084B 9180 009B LDS	R24,0x9B
    0084D 6480      ORI	R24,0x40
    0084E 9380 009B STS	0x9B,R24
    00850 9508      RET
_uart1_rx_isr:
    00851 922A      ST	-Y,R2
    00852 938A      ST	-Y,R24
    00853 939A      ST	-Y,R25
    00854 93EA      ST	-Y,R30
    00855 93FA      ST	-Y,R31
    00856 B62F      IN	R2,0x3F
    00857 922A      ST	-Y,R2
(0095) }
(0096) 
(0097) //***********************************************************************
(0098) // USART1中断接收字符串
(0099) //***********************************************************************
(0100) #pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
(0101) void uart1_rx_isr(void)
(0102) {
(0103)     RxCharBuf_wifi[RxBufWr_wifi] = UDR1;  //从数据缓冲器中接收数据
    00858 E38A      LDI	R24,0x3A
    00859 E093      LDI	R25,3
    0085A 91E0 0338 LDS	R30,RxBufWr_wifi
    0085C 27FF      CLR	R31
    0085D 0FE8      ADD	R30,R24
    0085E 1FF9      ADC	R31,R25
    0085F 9020 009C LDS	R2,0x9C
    00861 8220      ST	Z,R2
(0104) 	RxBufWr_wifi++;
    00862 9180 0338 LDS	R24,RxBufWr_wifi
    00864 5F8F      SUBI	R24,0xFF
    00865 9380 0338 STS	RxBufWr_wifi,R24
(0105)  	RxBufWr_wifi &= 0x0f;            //16->0
    00867 708F      ANDI	R24,0xF
    00868 9380 0338 STS	RxBufWr_wifi,R24
    0086A 9029      LD	R2,Y+
    0086B BE2F      OUT	0x3F,R2
    0086C 91F9      LD	R31,Y+
    0086D 91E9      LD	R30,Y+
    0086E 9199      LD	R25,Y+
    0086F 9189      LD	R24,Y+
    00870 9029      LD	R2,Y+
    00871 9518      RETI
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\SYN7318.c
(0001) #include <string.h>
(0002) #include <stdio.h>
(0003) #include <iom128v.h>
(0004) #include "USART.h"
(0005) #include "basic.h"
(0006) #include "SYN7318.h"
(0007) #include "LCD.h"
(0008) 
(0009) 
(0010) //带命令识别词条
(0011) const uchar words[] = "救命 1|救命啊 1|哎呦 2|现在多少度 100|现在温度多少 100|现在几点 101|时间 101|";
(0012) uchar tmp_text[255];
(0013) 
(0014) uint wordID = 0x0000;
(0015) 
(0016) //发送帧，0帧头，1数据区长度高字节，2数据区长度低字节，3命令字，4编码格式
(0017) extern uchar TxCharBuf[128];
(0018) extern uchar TxStrLen;
(0019) extern uchar RxCharBuf[16];
(0020) extern uchar RxBufWr, RxBufRd;
(0021) 
(0022) /*******************************************************************************
(0023) * SYN语音识别模块_初始化
(0024) ********************************************************************************/
(0025) void SYN7318_init(void)
(0026) {
(0027)     //PC6,7 定义输入 10ms低电平 延时100ms
(0028)     SRT_SYN_OUT;
_SYN7318_init:
    00872 9AA6      SBI	0x14,6
(0029)     RST_SYN_OUT;
    00873 9AA7      SBI	0x14,7
(0030)     SRT_SYN_SET;
    00874 9AAE      SBI	0x15,6
(0031)     RST_SYN_SET;
    00875 9AAF      SBI	0x15,7
(0032)     delay_nms(100);
    00876 E604      LDI	R16,0x64
    00877 E010      LDI	R17,0
    00878 940E 070B CALL	_delay_nms
(0033)     RST_SYN_CLR;
    0087A 98AF      CBI	0x15,7
(0034)     delay_nms(10);
    0087B E00A      LDI	R16,0xA
    0087C E010      LDI	R17,0
    0087D 940E 070B CALL	_delay_nms
(0035)     RST_SYN_SET;
    0087F 9AAF      SBI	0x15,7
(0036)     delay_nms(100);
    00880 E604      LDI	R16,0x64
    00881 E010      LDI	R17,0
    00882 940C 070B JMP	_delay_nms
(0037) }
(0038) 
(0039) /*******************************************************************************
(0040) * 构造帧头
(0041) ********************************************************************************/
(0042) void buildHead(uint len, uchar command)
(0043) {
(0044)     TxCharBuf[0] = 0xFD;        //构造帧头
_buildHead:
  command              --> R18
  len                  --> R16
    00884 EF8D      LDI	R24,0xFD
    00885 9380 03E1 STS	TxCharBuf,R24
(0045)     TxCharBuf[1] = len >> 8;    //构造数据区长度的高字节
    00887 0118      MOVW	R2,R16
    00888 2C23      MOV	R2,R3
    00889 2433      CLR	R3
    0088A 9220 03E2 STS	TxCharBuf+1,R2
(0046)     TxCharBuf[2] = len & 0xff;  //构造数据区长度的低字节
    0088C 01C8      MOVW	R24,R16
    0088D 7090      ANDI	R25,0
    0088E 9380 03E3 STS	TxCharBuf+2,R24
(0047)     TxCharBuf[3] = command;     //构造命令字
    00890 9320 03E4 STS	TxCharBuf+3,R18
(0048)     TxCharBuf[4] = 0x00;
    00892 2422      CLR	R2
    00893 9220 03E5 STS	TxCharBuf+4,R2
    00895 9508      RET
_checkSendReturn:
  command              --> R12
  length               --> R10
  number               --> R20
  RxSt                 --> R22
    00896 940E 0B66 CALL	push_xgsetF03C
(0049) }
(0050) 
(0051) /*******************************************************************************
(0052) * 检查回传 通用
(0053) ********************************************************************************/
(0054) uint checkSendReturn(void)
(0055) {   
(0056)     uchar RxSt, command, length, number = 0;
    00898 2744      CLR	R20
(0057)     wordID = 0x0000;
    00899 2422      CLR	R2
    0089A 2433      CLR	R3
    0089B 9230 020C STS	wordID+1,R3
    0089D 9220 020B STS	wordID,R2
(0058)     do {
    0089F C004      RJMP	0x08A4
(0059)         while(RxBufRd == RxBufWr) delay_nms(1);
    008A0 E001      LDI	R16,1
    008A1 E010      LDI	R17,0
    008A2 940E 070B CALL	_delay_nms
    008A4 9020 03CD LDS	R2,RxBufWr
    008A6 9030 03CC LDS	R3,RxBufRd
    008A8 1432      CP	R3,R2
    008A9 F3B1      BEQ	0x08A0
(0060)         RxSt = RxCharBuf[RxBufRd];
    008AA EC8F      LDI	R24,0xCF
    008AB E093      LDI	R25,3
    008AC 2DE3      MOV	R30,R3
    008AD 27FF      CLR	R31
    008AE 0FE8      ADD	R30,R24
    008AF 1FF9      ADC	R31,R25
    008B0 8160      LD	R22,Z
(0061)         RxBufRd ++;
    008B1 2D83      MOV	R24,R3
    008B2 5F8F      SUBI	R24,0xFF
    008B3 9380 03CC STS	RxBufRd,R24
(0062)         RxBufRd &= 0x0f;
    008B5 708F      ANDI	R24,0xF
    008B6 9380 03CC STS	RxBufRd,R24
(0063)         switch(number){
    008B8 2EC4      MOV	R12,R20
    008B9 24DD      CLR	R13
    008BA 20CC      TST	R12
    008BB F411      BNE	0x08BE
    008BC 20DD      TST	R13
    008BD F091      BEQ	0x08D0
    008BE 01C6      MOVW	R24,R12
    008BF 3081      CPI	R24,1
    008C0 E0E0      LDI	R30,0
    008C1 079E      CPC	R25,R30
    008C2 F091      BEQ	0x08D5
    008C3 3082      CPI	R24,2
    008C4 E0E0      LDI	R30,0
    008C5 079E      CPC	R25,R30
    008C6 F0A9      BEQ	0x08DC
    008C7 3083      CPI	R24,3
    008C8 E0E0      LDI	R30,0
    008C9 079E      CPC	R25,R30
    008CA F0D1      BEQ	0x08E5
    008CB 3084      CPI	R24,4
    008CC E0E0      LDI	R30,0
    008CD 079E      CPC	R25,R30
    008CE F119      BEQ	0x08F2
    008CF C03C      RJMP	0x090C
(0064)             case 0 :
(0065)                 if (RxSt == 0xFC){
    008D0 3F6C      CPI	R22,0xFC
    008D1 F009      BEQ	0x08D3
    008D2 C039      RJMP	0x090C
(0066)                     number = 1;
    008D3 E041      LDI	R20,1
(0067)                 }
(0068)                 break;
    008D4 C037      RJMP	0x090C
(0069)             case 1 : 
(0070)                 if(RxSt != 0)
    008D5 2366      TST	R22
    008D6 F019      BEQ	0x08DA
(0071)                     return 0;
    008D7 2700      CLR	R16
    008D8 2711      CLR	R17
    008D9 C033      RJMP	0x090D
(0072)                 number = 2;
    008DA E042      LDI	R20,2
(0073)                 break;
    008DB C030      RJMP	0x090C
(0074)            case 2 :
(0075)                 if(RxSt > 6)
    008DC E086      LDI	R24,6
    008DD 1786      CP	R24,R22
    008DE F418      BCC	0x08E2
(0076)                     return 0;
    008DF 2700      CLR	R16
    008E0 2711      CLR	R17
    008E1 C02B      RJMP	0x090D
(0077)                 length = RxSt;
    008E2 2EA6      MOV	R10,R22
(0078)                 number = 3;
    008E3 E043      LDI	R20,3
(0079)                 break;
    008E4 C027      RJMP	0x090C
(0080)            case 3 : 
(0081)                 if(RxSt == ACC_ERR)
    008E5 3465      CPI	R22,0x45
    008E6 F419      BNE	0x08EA
(0082)                     return 0;
    008E7 2700      CLR	R16
    008E8 2711      CLR	R17
    008E9 C023      RJMP	0x090D
(0083)                 length--;
    008EA 94AA      DEC	R10
(0084)                 if(length == 0)
    008EB F419      BNE	0x08EF
(0085)                     return RxSt;
    008EC 2F06      MOV	R16,R22
    008ED 2711      CLR	R17
    008EE C01E      RJMP	0x090D
(0086)                 command = RxSt;
    008EF 2EC6      MOV	R12,R22
(0087)                 number = 4;
    008F0 E044      LDI	R20,4
(0088)                 break;
    008F1 C01A      RJMP	0x090C
(0089)             case 4 :
(0090)                 wordID <<= 8;
    008F2 9020 020B LDS	R2,wordID
    008F4 9030 020C LDS	R3,wordID+1
    008F6 2C32      MOV	R3,R2
    008F7 2422      CLR	R2
    008F8 9230 020C STS	wordID+1,R3
    008FA 9220 020B STS	wordID,R2
(0091)                 wordID |= RxSt;
    008FC 2E26      MOV	R2,R22
    008FD 2433      CLR	R3
    008FE 9040 020B LDS	R4,wordID
    00900 9050 020C LDS	R5,wordID+1
    00902 2842      OR	R4,R2
    00903 2853      OR	R5,R3
    00904 9250 020C STS	wordID+1,R5
    00906 9240 020B STS	wordID,R4
(0092)                 //wordID |= command;
(0093)                 length--;
    00908 94AA      DEC	R10
(0094)                 if(length == 0)
    00909 F411      BNE	0x090C
(0095)                     return wordID;
    0090A 0182      MOVW	R16,R4
    0090B C001      RJMP	0x090D
(0096)                 break;
(0097)         }
(0098)     }while(1);
    0090C CF97      RJMP	0x08A4
    0090D 940C 0B6F JMP	pop_xgsetF03C
_voicePlayer:
  temp                 --> Y,+1
  length               --> R20
  i                    --> R22
  content              --> R10
    0090F 940E 0B4A CALL	push_xgsetF00C
    00911 0158      MOVW	R10,R16
(0099)     return 0;
(0100) }
(0101) 
(0102) 
(0103) /*******************************************************************************
(0104) * 语音播报
(0105) ********************************************************************************/
(0106) void voicePlayer(uchar *content)
(0107) {   
(0108)     int i;
(0109)     uchar temp;
(0110)     uint length = strlen(content); //待发送文本长度
    00912 0185      MOVW	R16,R10
    00913 940E 0ADF CALL	_strlen
    00915 01A8      MOVW	R20,R16
(0111)     buildHead(length+2, PLAY_TEXT); //数据区长度、合成播放命令
    00916 E021      LDI	R18,1
    00917 5F0E      SUBI	R16,0xFE
    00918 4F1F      SBCI	R17,0xFF
    00919 DF6A      RCALL	_buildHead
(0112)     TxCharBuf[4] = GB2312;   //构造命令参数,编码格式为GB2312
    0091A 2422      CLR	R2
    0091B 9220 03E5 STS	TxCharBuf+4,R2
(0113)     for(i = 0; i < length; i++){    //构造待发送文本
    0091D 2766      CLR	R22
    0091E 2777      CLR	R23
    0091F C00C      RJMP	0x092C
(0114)         TxCharBuf[5+i] = content[i]; 
    00920 01FB      MOVW	R30,R22
    00921 0DEA      ADD	R30,R10
    00922 1DFB      ADC	R31,R11
    00923 8020      LD	R2,Z
    00924 EE86      LDI	R24,0xE6
    00925 E093      LDI	R25,3
    00926 01FB      MOVW	R30,R22
    00927 0FE8      ADD	R30,R24
    00928 1FF9      ADC	R31,R25
    00929 8220      ST	Z,R2
    0092A 5F6F      SUBI	R22,0xFF
    0092B 4F7F      SBCI	R23,0xFF
    0092C 1764      CP	R22,R20
    0092D 0775      CPC	R23,R21
    0092E F388      BCS	0x0920
(0115)     }
(0116)     TxCharBuf[5+i] = 0x00;
    0092F EE86      LDI	R24,0xE6
    00930 E093      LDI	R25,3
    00931 01FB      MOVW	R30,R22
    00932 0FE8      ADD	R30,R24
    00933 1FF9      ADC	R31,R25
    00934 2422      CLR	R2
    00935 8220      ST	Z,R2
(0117) 
(0118)     TxStrLen = length+5;   //整个帧的长度
    00936 01CA      MOVW	R24,R20
    00937 9605      ADIW	R24,5
    00938 9380 03DF STS	TxStrLen,R24
(0119)     do {	
(0120)         RxBufRd = RxBufWr = 0;
    0093A 2422      CLR	R2
    0093B 9220 03CD STS	RxBufWr,R2
    0093D 9220 03CC STS	RxBufRd,R2
(0121)         puts0();                    //串口0发送数据
    0093F 940E 07D1 CALL	_puts0
(0122)         if(checkSendReturn() != ACC_OK)
    00941 DF54      RCALL	_checkSendReturn
    00942 3401      CPI	R16,0x41
    00943 E0E0      LDI	R30,0
    00944 071E      CPC	R17,R30
    00945 F029      BEQ	0x094B
(0123)             delay_nms(20);          //延时20ms，帧与帧之间必须间隔超过15ms
    00946 E104      LDI	R16,0x14
    00947 E010      LDI	R17,0
    00948 940E 070B CALL	_delay_nms
(0124)         else
(0125)             break;
(0126)     }while(1);
    0094A CFEF      RJMP	0x093A
(0127)     if(checkSendReturn() == STA_FREE)
    0094B DF4A      RCALL	_checkSendReturn
    0094C 01A8      MOVW	R20,R16
    0094D 340F      CPI	R16,0x4F
    0094E E0E0      LDI	R30,0
    0094F 071E      CPC	R17,R30
    00950 F409      BNE	0x0952
(0128)         return;
    00951 C001      RJMP	0x0953
(0129)     else
(0130)         waitFree();                 //等待模块空闲                        
    00952 D0C8      RCALL	_waitFree
    00953 940C 0B51 JMP	pop_xgsetF00C
(0131) }
(0132) 
(0133) /*******************************************************************************
(0134) * 语音播报欢迎信息
(0135) ********************************************************************************/
(0136) void SYN7318_welcome(void)
(0137) {
(0138)     sprintf(tmp_text,"[m3][s5][v3][f1][b0]欢迎使用独居老人应急呼救系统[m3][d]");
_SYN7318_welcome:
    00955 E72E      LDI	R18,0x7E
    00956 E032      LDI	R19,2
    00957 E601      LDI	R16,0x61
    00958 E014      LDI	R17,4
    00959 940E 0F01 CALL	_sprintf
(0139)     voicePlayer(tmp_text);
    0095B E601      LDI	R16,0x61
    0095C E014      LDI	R17,4
    0095D CFB1      RJMP	_voicePlayer
(0140) }
(0141) 
(0142) /*******************************************************************************
(0143) * 语音播报 识别错误提示
(0144) ********************************************************************************/
(0145) void SYN7318_Error(void)
(0146) {
(0147)     sprintf(tmp_text,"[m3][s5][v3][f1][b0]不好意思，系统未理解您的意思，请重新说一遍[m3][d]");
_SYN7318_Error:
    0095E E328      LDI	R18,0x38
    0095F E032      LDI	R19,2
    00960 E601      LDI	R16,0x61
    00961 E014      LDI	R17,4
    00962 940E 0F01 CALL	_sprintf
(0148)     voicePlayer(tmp_text);
    00964 E601      LDI	R16,0x61
    00965 E014      LDI	R17,4
    00966 CFA8      RJMP	_voicePlayer
_setVoiceLevel:
  level                --> R10
    00967 92AA      ST	-Y,R10
    00968 2EA0      MOV	R10,R16
(0149) }
(0150) 
(0151) /*******************************************************************************
(0152) * 设置播放音量
(0153) ********************************************************************************/
(0154) void setVoiceLevel(uchar level)
(0155) {
(0156)     buildHead(0x02, SET_VOLUME); //数据区长度、播放音量设置命令
    00969 E025      LDI	R18,5
    0096A E002      LDI	R16,2
    0096B E010      LDI	R17,0
    0096C DF17      RCALL	_buildHead
(0157)     TxCharBuf[4] = level;   //构造命令参数,播放音量设置为level级（0-9级，默认为5级）
    0096D 92A0 03E5 STS	TxCharBuf+4,R10
(0158)     TxStrLen = strlen(TxCharBuf);   //整个帧的长度
    0096F EE01      LDI	R16,0xE1
    00970 E013      LDI	R17,3
    00971 940E 0ADF CALL	_strlen
    00973 9300 03DF STS	TxStrLen,R16
(0159) 	do{
(0160)         RxBufRd = RxBufWr = 0;
    00975 2422      CLR	R2
    00976 9220 03CD STS	RxBufWr,R2
    00978 9220 03CC STS	RxBufRd,R2
(0161)         puts0();                        //串口0发送数据
    0097A 940E 07D1 CALL	_puts0
(0162)     }while(checkSendReturn() == 0);
    0097C DF19      RCALL	_checkSendReturn
    0097D 3000      CPI	R16,0
    0097E 0701      CPC	R16,R17
    0097F F3A9      BEQ	0x0975
(0163)     //while(checkReturnByParam(0x4F) == 0);
(0164)     delay_nms(20);                  //延时20ms，帧与帧之间必须间隔超过15ms 
    00980 E104      LDI	R16,0x14
    00981 E010      LDI	R17,0
    00982 940E 070B CALL	_delay_nms
    00984 90A9      LD	R10,Y+
    00985 9508      RET
(0165)     
(0166) }
(0167) 
(0168) /*******************************************************************************
(0169) * 设置语音识别参数命令
(0170) ********************************************************************************/
(0171) void setVoiceOption(void)
(0172) {
(0173)     buildHead(0x07, SET_PARAM);
_setVoiceOption:
    00986 E12E      LDI	R18,0x1E
    00987 E007      LDI	R16,7
    00988 E010      LDI	R17,0
    00989 DEFA      RCALL	_buildHead
(0174)     TxCharBuf[4] = DIS_NEAR; //设置识别距离为 中
    0098A E082      LDI	R24,2
    0098B 9380 03E5 STS	TxCharBuf+4,R24
(0175)     TxCharBuf[5] = QUI_H; //用户静音上限高字节
    0098D E08B      LDI	R24,0xB
    0098E 9380 03E6 STS	TxCharBuf+5,R24
(0176)     TxCharBuf[6] = QUI_L; //用户静音上限低字节 3000ms
    00990 EB88      LDI	R24,0xB8
    00991 9380 03E7 STS	TxCharBuf+6,R24
(0177)     TxCharBuf[7] = RECO_TIME_H; //用户语音上限高字节
    00993 E183      LDI	R24,0x13
    00994 9380 03E8 STS	TxCharBuf+7,R24
(0178)     TxCharBuf[8] = RECO_TIME_L; //用户语音上限低字节 5000ms
    00996 E888      LDI	R24,0x88
    00997 9380 03E9 STS	TxCharBuf+8,R24
(0179)     TxCharBuf[9] = REFUSE_LEVEL; //拒识级别 较低
    00999 E084      LDI	R24,4
    0099A 9380 03EA STS	TxCharBuf+9,R24
(0180)     
(0181)     TxStrLen = 10;   //整个帧的长度
    0099C E08A      LDI	R24,0xA
    0099D 9380 03DF STS	TxStrLen,R24
(0182)     do{
(0183)         RxBufRd = RxBufWr = 0;
    0099F 2422      CLR	R2
    009A0 9220 03CD STS	RxBufWr,R2
    009A2 9220 03CC STS	RxBufRd,R2
(0184) 	    puts0();                        //串口0发送数据
    009A4 940E 07D1 CALL	_puts0
(0185)         if(checkSendReturn() == ACC_OK){
    009A6 DEEF      RCALL	_checkSendReturn
    009A7 3401      CPI	R16,0x41
    009A8 E0E0      LDI	R30,0
    009A9 071E      CPC	R17,R30
    009AA F409      BNE	0x09AC
(0186)            break;
    009AB C001      RJMP	0x09AD
(0187)         }
(0188)     }while(1); 
    009AC CFF2      RJMP	0x099F
(0189)     delay_nms(20);                  //延时20ms，帧与帧之间必须间隔超过15ms  
    009AD E104      LDI	R16,0x14
    009AE E010      LDI	R17,0
    009AF 940C 070B JMP	_delay_nms
_updateWords:
  length               --> R20
  i                    --> R22
    009B1 940E 0B40 CALL	push_xgsetF000
(0190) }
(0191) 
(0192) /*******************************************************************************
(0193) * 词条更新
(0194) ********************************************************************************/
(0195) void updateWords(void)
(0196) {
(0197)     int i;
(0198)     uchar length = strlen(words);
    009B3 EB0D      LDI	R16,0xBD
    009B4 E011      LDI	R17,1
    009B5 940E 0ADF CALL	_strlen
    009B7 2F40      MOV	R20,R16
(0199)     buildHead(length+3, UPADTE_WORD);
    009B8 E12F      LDI	R18,0x1F
    009B9 2711      CLR	R17
    009BA 5F0D      SUBI	R16,0xFD
    009BB 4F1F      SBCI	R17,0xFF
    009BC DEC7      RCALL	_buildHead
(0200)     TxCharBuf[4] = GB2312;          //编码格式GB2312
    009BD 2422      CLR	R2
    009BE 9220 03E5 STS	TxCharBuf+4,R2
(0201)     TxCharBuf[5] = 0x20;            //词典参数，启用内置智能解析，关闭内置垃圾词条，词典编号为0x00
    009C0 E280      LDI	R24,0x20
    009C1 9380 03E6 STS	TxCharBuf+5,R24
(0202)     for(i = 0; i < length; i++){    //词条
    009C3 2766      CLR	R22
    009C4 2777      CLR	R23
    009C5 C00E      RJMP	0x09D4
(0203)         TxCharBuf[6+i] = words[i];
    009C6 EB8D      LDI	R24,0xBD
    009C7 E091      LDI	R25,1
    009C8 01FB      MOVW	R30,R22
    009C9 0FE8      ADD	R30,R24
    009CA 1FF9      ADC	R31,R25
    009CB 8020      LD	R2,Z
    009CC EE87      LDI	R24,0xE7
    009CD E093      LDI	R25,3
    009CE 01FB      MOVW	R30,R22
    009CF 0FE8      ADD	R30,R24
    009D0 1FF9      ADC	R31,R25
    009D1 8220      ST	Z,R2
    009D2 5F6F      SUBI	R22,0xFF
    009D3 4F7F      SBCI	R23,0xFF
    009D4 2E24      MOV	R2,R20
    009D5 2433      CLR	R3
    009D6 1562      CP	R22,R2
    009D7 0573      CPC	R23,R3
    009D8 F36C      BLT	0x09C6
(0204)     }
(0205)     
(0206)     TxStrLen = length + 6;       //整个帧的长度
    009D9 2D82      MOV	R24,R2
    009DA 5F8A      SUBI	R24,0xFA
    009DB 9380 03DF STS	TxStrLen,R24
(0207) 	do{
(0208)         RxBufRd = RxBufWr = 0;
    009DD 2422      CLR	R2
    009DE 9220 03CD STS	RxBufWr,R2
    009E0 9220 03CC STS	RxBufRd,R2
(0209)         puts0();                        //串口0发送数据
    009E2 940E 07D1 CALL	_puts0
(0210)         DisplayCgrom(0x88,"正在更新词条。。");
    009E4 E227      LDI	R18,0x27
    009E5 E032      LDI	R19,2
    009E6 E808      LDI	R16,0x88
    009E7 940E 0789 CALL	_DisplayCgrom
(0211)         delay_nms(2);
    009E9 E002      LDI	R16,2
    009EA E010      LDI	R17,0
    009EB 940E 070B CALL	_delay_nms
(0212)         if(checkSendReturn() == ACC_OK){
    009ED DEA8      RCALL	_checkSendReturn
    009EE 3401      CPI	R16,0x41
    009EF E0E0      LDI	R30,0
    009F0 071E      CPC	R17,R30
    009F1 F409      BNE	0x09F3
(0213)             break;
    009F2 C005      RJMP	0x09F8
(0214)         }
(0215)         else{
(0216)             delay_nms(20);
    009F3 E104      LDI	R16,0x14
    009F4 E010      LDI	R17,0
    009F5 940E 070B CALL	_delay_nms
(0217)         }
(0218)     }while(1);
    009F7 CFE5      RJMP	0x09DD
(0219)     if(checkSendReturn() == UPD_OK){    //检查回传 ，词条更新时不能被打断
    009F8 DE9D      RCALL	_checkSendReturn
    009F9 01A8      MOVW	R20,R16
    009FA 3301      CPI	R16,0x31
    009FB E0E0      LDI	R30,0
    009FC 071E      CPC	R17,R30
    009FD F471      BNE	0x0A0C
(0220)         LCD_clear();
    009FE 940E 0783 CALL	_LCD_clear
(0221)         DisplayCgrom(0x88,"词条更新成功");
    00A00 E12A      LDI	R18,0x1A
    00A01 E032      LDI	R19,2
    00A02 E808      LDI	R16,0x88
    00A03 940E 0789 CALL	_DisplayCgrom
(0222)         delay_nms(1000);
    00A05 EE08      LDI	R16,0xE8
    00A06 E013      LDI	R17,3
    00A07 940E 070B CALL	_delay_nms
(0223)         LCD_clear();
    00A09 940E 0783 CALL	_LCD_clear
(0224)     }else{
    00A0B C00D      RJMP	0x0A19
(0225)         LCD_clear();
    00A0C 940E 0783 CALL	_LCD_clear
(0226)         DisplayCgrom(0x88,"词条更新失败");
    00A0E E02D      LDI	R18,0xD
    00A0F E032      LDI	R19,2
    00A10 E808      LDI	R16,0x88
    00A11 940E 0789 CALL	_DisplayCgrom
(0227)         delay_nms(1000);
    00A13 EE08      LDI	R16,0xE8
    00A14 E013      LDI	R17,3
    00A15 940E 070B CALL	_delay_nms
(0228)         LCD_clear();
    00A17 940E 0783 CALL	_LCD_clear
(0229)     }
    00A19 940C 0B45 JMP	pop_xgsetF000
(0230)     //延时20ms，帧与帧之间必须间隔超过15ms
(0231)     
(0232) }
(0233) 
(0234) /*******************************************************************************
(0235) * 等待模块空闲状态
(0236) ********************************************************************************/
(0237) void waitFree(void)
(0238) {
(0239)     buildHead(0x01, CHECK_STATUS);
_waitFree:
    00A1B E221      LDI	R18,0x21
    00A1C E001      LDI	R16,1
    00A1D E010      LDI	R17,0
    00A1E DE65      RCALL	_buildHead
(0240)     TxStrLen = 4;//strlen(TxCharBuf);   //整个帧的长度
    00A1F E084      LDI	R24,4
    00A20 9380 03DF STS	TxStrLen,R24
(0241)     do{
(0242)         RxBufRd = RxBufWr = 0;
    00A22 2422      CLR	R2
    00A23 9220 03CD STS	RxBufWr,R2
    00A25 9220 03CC STS	RxBufRd,R2
(0243)         puts0();                        //串口0发送数据
    00A27 940E 07D1 CALL	_puts0
(0244)         if(checkSendReturn() == ACC_OK){
    00A29 DE6C      RCALL	_checkSendReturn
    00A2A 3401      CPI	R16,0x41
    00A2B E0E0      LDI	R30,0
    00A2C 071E      CPC	R17,R30
    00A2D F431      BNE	0x0A34
(0245)             if(checkSendReturn() == STA_FREE)
    00A2E DE67      RCALL	_checkSendReturn
    00A2F 340F      CPI	R16,0x4F
    00A30 E0E0      LDI	R30,0
    00A31 071E      CPC	R17,R30
    00A32 F409      BNE	0x0A34
(0246)                 break;
    00A33 C005      RJMP	0x0A39
(0247)         }
(0248)         delay_nms(20);      //延时20ms，帧与帧之间必须间隔超过15ms
    00A34 E104      LDI	R16,0x14
    00A35 E010      LDI	R17,0
    00A36 940E 070B CALL	_delay_nms
(0249)     }while(1);              
    00A38 CFE9      RJMP	0x0A22
    00A39 9508      RET
(0250) }
(0251) 
(0252) /*******************************************************************************
(0253) * 开始语音识别
(0254) ********************************************************************************/
(0255) void startRecognition(void)
(0256) {
(0257)     buildHead(0x02, START_RECOGN);
_startRecognition:
    00A3A E120      LDI	R18,0x10
    00A3B E002      LDI	R16,2
    00A3C E010      LDI	R17,0
    00A3D DE46      RCALL	_buildHead
(0258)     TxCharBuf[4] = 0x00;     //词典编号
    00A3E 2422      CLR	R2
    00A3F 9220 03E5 STS	TxCharBuf+4,R2
(0259)     TxStrLen = 5 ;
    00A41 E085      LDI	R24,5
    00A42 9380 03DF STS	TxStrLen,R24
(0260)     do{
(0261)         RxBufRd = RxBufWr = 0;
    00A44 2422      CLR	R2
    00A45 9220 03CD STS	RxBufWr,R2
    00A47 9220 03CC STS	RxBufRd,R2
(0262)         puts0();            //串口0发送数据
    00A49 940E 07D1 CALL	_puts0
(0263)         if(checkSendReturn() == ACC_OK){
    00A4B DE4A      RCALL	_checkSendReturn
    00A4C 3401      CPI	R16,0x41
    00A4D E0E0      LDI	R30,0
    00A4E 071E      CPC	R17,R30
    00A4F F409      BNE	0x0A51
(0264)            break;
    00A50 C005      RJMP	0x0A56
(0265)         }
(0266)         delay_nms(20);      //延时20ms，帧与帧之间必须间隔超过15ms
    00A51 E104      LDI	R16,0x14
    00A52 E010      LDI	R17,0
    00A53 940E 070B CALL	_delay_nms
(0267)     }while(1);
    00A55 CFEE      RJMP	0x0A44
    00A56 9508      RET
FILE: G:\基于ASR技术的独居老人应急呼救系统\OldManAlarm\ESP8266.c
(0001) #include <string.h>
(0002) #include <stdio.h>
(0003) #include <iom128v.h>
(0004) #include "USART.h"
(0005) #include "basic.h"
(0006) #include "ESP8266.h"
(0007) 
(0008) //发送字符数组
(0009) extern uchar TxCharBuf_wifi[128];
(0010) extern uchar TxStrLen_wifi;
(0011) //接收字符数组
(0012) extern uchar RxCharBuf_wifi[16];
(0013) extern uchar RxCharNum_wifi, RxBufWr_wifi, RxBufRd_wifi;
(0014) 
(0015) //***********************************************************************
(0016) //	wifi模块重启
(0017) //***********************************************************************
(0018) void wifi_Restart(void)
(0019) {
(0020)     sprintf(TxCharBuf_wifi, "AT+RST");
_wifi_Restart:
    00A57 E228      LDI	R18,0x28
    00A58 E033      LDI	R19,3
    00A59 E40C      LDI	R16,0x4C
    00A5A E013      LDI	R17,3
    00A5B 940E 0F01 CALL	_sprintf
(0021)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00A5D E40C      LDI	R16,0x4C
    00A5E E013      LDI	R17,3
    00A5F 940E 0ADF CALL	_strlen
    00A61 9300 034A STS	TxStrLen_wifi,R16
(0022) 	puts1();
    00A63 940C 0822 JMP	_puts1
(0023) }
(0024) 
(0025) //***********************************************************************
(0026) //	wifi模块连接wifi热点
(0027) //***********************************************************************
(0028) void wifi_ConnectSTA(void)
(0029) {
(0030)     sprintf(TxCharBuf_wifi, "AT+CWJAP=ICHARM,meiyanliang");
_wifi_ConnectSTA:
    00A65 E02C      LDI	R18,0xC
    00A66 E033      LDI	R19,3
    00A67 E40C      LDI	R16,0x4C
    00A68 E013      LDI	R17,3
    00A69 940E 0F01 CALL	_sprintf
(0031)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00A6B E40C      LDI	R16,0x4C
    00A6C E013      LDI	R17,3
    00A6D 940E 0ADF CALL	_strlen
    00A6F 9300 034A STS	TxStrLen_wifi,R16
(0032) 	puts1();
    00A71 940C 0822 JMP	_puts1
(0033) }
(0034) 
(0035) //***********************************************************************
(0036) //	设置为单路连接模式
(0037) //***********************************************************************
(0038) void wifi_CIPMUX(void)
(0039) {
(0040)     sprintf(TxCharBuf_wifi, "AT+CIPMUX=0");
_wifi_CIPMUX:
    00A73 E020      LDI	R18,0
    00A74 E033      LDI	R19,3
    00A75 E40C      LDI	R16,0x4C
    00A76 E013      LDI	R17,3
    00A77 940E 0F01 CALL	_sprintf
(0041)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00A79 E40C      LDI	R16,0x4C
    00A7A E013      LDI	R17,3
    00A7B 940E 0ADF CALL	_strlen
    00A7D 9300 034A STS	TxStrLen_wifi,R16
(0042) 	puts1();
    00A7F 940C 0822 JMP	_puts1
(0043) }
(0044) 
(0045) //***********************************************************************
(0046) //	建立TCP连接
(0047) //***********************************************************************
(0048) void wifi_TCPConnect(void)
(0049) {
(0050)     sprintf(TxCharBuf_wifi, "TCP,alarm.icharm.me,80");
_wifi_TCPConnect:
    00A81 EE29      LDI	R18,0xE9
    00A82 E032      LDI	R19,2
    00A83 E40C      LDI	R16,0x4C
    00A84 E013      LDI	R17,3
    00A85 940E 0F01 CALL	_sprintf
(0051)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00A87 E40C      LDI	R16,0x4C
    00A88 E013      LDI	R17,3
    00A89 940E 0ADF CALL	_strlen
    00A8B 9300 034A STS	TxStrLen_wifi,R16
(0052) 	puts1();
    00A8D 940C 0822 JMP	_puts1
(0053) }
(0054) 
(0055) //***********************************************************************
(0056) //	设置模块为透传模式
(0057) //***********************************************************************
(0058) void wifi_CIPMODE(void)
(0059) {
(0060)     sprintf(TxCharBuf_wifi, "AT+CIPMODE=1");
_wifi_CIPMODE:
    00A8F ED2C      LDI	R18,0xDC
    00A90 E032      LDI	R19,2
    00A91 E40C      LDI	R16,0x4C
    00A92 E013      LDI	R17,3
    00A93 940E 0F01 CALL	_sprintf
(0061)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00A95 E40C      LDI	R16,0x4C
    00A96 E013      LDI	R17,3
    00A97 940E 0ADF CALL	_strlen
    00A99 9300 034A STS	TxStrLen_wifi,R16
(0062) 	puts1();
    00A9B 940C 0822 JMP	_puts1
(0063) }
(0064) 
(0065) //***********************************************************************
(0066) //	使用透传模式向服务器发送数据
(0067) //***********************************************************************
(0068) void wifi_CIPSEND(void)
(0069) {
(0070)     sprintf(TxCharBuf_wifi, "AT+CIPSEND");
_wifi_CIPSEND:
    00A9D ED21      LDI	R18,0xD1
    00A9E E032      LDI	R19,2
    00A9F E40C      LDI	R16,0x4C
    00AA0 E013      LDI	R17,3
    00AA1 940E 0F01 CALL	_sprintf
(0071)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00AA3 E40C      LDI	R16,0x4C
    00AA4 E013      LDI	R17,3
    00AA5 940E 0ADF CALL	_strlen
    00AA7 9300 034A STS	TxStrLen_wifi,R16
(0072) 	puts1();
    00AA9 940C 0822 JMP	_puts1
(0073) }
(0074) 
(0075) 
(0076) //***********************************************************************
(0077) //	发送短信
(0078) //***********************************************************************
(0079) void wifi_SendMsg(void)
(0080) {
(0081)     sprintf(TxCharBuf_wifi, "GET http://alarm.icharm.me");
_wifi_SendMsg:
    00AAB EB26      LDI	R18,0xB6
    00AAC E032      LDI	R19,2
    00AAD E40C      LDI	R16,0x4C
    00AAE E013      LDI	R17,3
    00AAF 940E 0F01 CALL	_sprintf
(0082)     TxStrLen_wifi = strlen(TxCharBuf_wifi);
    00AB1 E40C      LDI	R16,0x4C
    00AB2 E013      LDI	R17,3
    00AB3 940E 0ADF CALL	_strlen
    00AB5 9300 034A STS	TxStrLen_wifi,R16
(0083) 	puts1();
    00AB7 940C 0822 JMP	_puts1
(0084) }
(0085) 
(0086) //***********************************************************************
(0087) //	发送短信
(0088) //***********************************************************************
(0089) void wifi_SENDMSG(void)
(0090) {
(0091)     wifi_TCPConnect();
_wifi_SENDMSG:
    00AB9 DFC7      RCALL	_wifi_TCPConnect
(0092)     delay_nms(200);
    00ABA EC08      LDI	R16,0xC8
    00ABB E010      LDI	R17,0
    00ABC 940E 070B CALL	_delay_nms
(0093)     wifi_CIPMODE();
    00ABE DFD0      RCALL	_wifi_CIPMODE
(0094)     delay_nms(200);
    00ABF EC08      LDI	R16,0xC8
    00AC0 E010      LDI	R17,0
    00AC1 940E 070B CALL	_delay_nms
(0095)     wifi_CIPSEND();
    00AC3 DFD9      RCALL	_wifi_CIPSEND
(0096)     delay_nms(50);
    00AC4 E302      LDI	R16,0x32
    00AC5 E010      LDI	R17,0
    00AC6 940E 070B CALL	_delay_nms
(0097)     wifi_SendMsg();
FILE: <library>
    00AC8 CFE2      RJMP	_wifi_SendMsg
_strcat:
    00AC9 2FA0      MOV	R26,R16
    00ACA 2FB1      MOV	R27,R17
    00ACB 2FE2      MOV	R30,R18
    00ACC 2FF3      MOV	R31,R19
    00ACD 912D      LD	R18,X+
    00ACE 2322      TST	R18
    00ACF F7E9      BNE	0x0ACD
    00AD0 9711      SBIW	R26,1
    00AD1 9121      LD	R18,Z+
    00AD2 932D      ST	X+,R18
    00AD3 2322      TST	R18
    00AD4 F7E1      BNE	0x0AD1
    00AD5 9508      RET
_strcpy:
    00AD6 2FA0      MOV	R26,R16
    00AD7 2FB1      MOV	R27,R17
    00AD8 2FE2      MOV	R30,R18
    00AD9 2FF3      MOV	R31,R19
    00ADA 9001      LD	R0,Z+
    00ADB 920D      ST	X+,R0
    00ADC 2000      TST	R0
    00ADD F7E1      BNE	0x0ADA
    00ADE 9508      RET
_strlen:
    00ADF 2FE0      MOV	R30,R16
    00AE0 2FF1      MOV	R31,R17
    00AE1 27AA      CLR	R26
    00AE2 27BB      CLR	R27
    00AE3 9001      LD	R0,Z+
    00AE4 2000      TST	R0
    00AE5 F011      BEQ	0x0AE8
    00AE6 9611      ADIW	R26,1
    00AE7 CFFB      RJMP	0x0AE3
    00AE8 2F0A      MOV	R16,R26
    00AE9 2F1B      MOV	R17,R27
    00AEA 9508      RET
push_arg4:
    00AEB 933A      ST	-Y,R19
    00AEC 932A      ST	-Y,R18
push_arg2:
    00AED 931A      ST	-Y,R17
    00AEE 930A      ST	-Y,R16
    00AEF 9508      RET
mod16u:
    00AF0 9468      BSET	6
    00AF1 C001      RJMP	xdiv16u
div16u:
    00AF2 94E8      BCLR	6
xdiv16u:
    00AF3 92EA      ST	-Y,R14
    00AF4 92FA      ST	-Y,R15
    00AF5 938A      ST	-Y,R24
    00AF6 24EE      CLR	R14
    00AF7 24FF      CLR	R15
    00AF8 E180      LDI	R24,0x10
    00AF9 0F00      LSL	R16
    00AFA 1F11      ROL	R17
    00AFB 1CEE      ROL	R14
    00AFC 1CFF      ROL	R15
    00AFD 16E2      CP	R14,R18
    00AFE 06F3      CPC	R15,R19
    00AFF F018      BCS	0x0B03
    00B00 1AE2      SUB	R14,R18
    00B01 0AF3      SBC	R15,R19
    00B02 9503      INC	R16
    00B03 958A      DEC	R24
    00B04 F7A1      BNE	0x0AF9
    00B05 F416      BRTC	0x0B08
    00B06 2D0E      MOV	R16,R14
    00B07 2D1F      MOV	R17,R15
    00B08 9189      LD	R24,Y+
    00B09 90F9      LD	R15,Y+
    00B0A 90E9      LD	R14,Y+
    00B0B 9508      RET
elpm32:
    00B0C 93EA      ST	-Y,R30
    00B0D 93FA      ST	-Y,R31
    00B0E 920A      ST	-Y,R0
    00B0F 2FE0      MOV	R30,R16
    00B10 2FF1      MOV	R31,R17
    00B11 95D8      ELPM
    00B12 2D00      MOV	R16,R0
    00B13 9631      ADIW	R30,1
    00B14 95D8      ELPM
    00B15 2D10      MOV	R17,R0
    00B16 9631      ADIW	R30,1
    00B17 95D8      ELPM
    00B18 2D20      MOV	R18,R0
    00B19 9631      ADIW	R30,1
    00B1A 95D8      ELPM
    00B1B 2D30      MOV	R19,R0
    00B1C 9009      LD	R0,Y+
    00B1D 91F9      LD	R31,Y+
    00B1E 91E9      LD	R30,Y+
    00B1F 9508      RET
pop_xgsetF0FC:
    00B20 90A9      LD	R10,Y+
    00B21 90B9      LD	R11,Y+
    00B22 90C9      LD	R12,Y+
    00B23 90D9      LD	R13,Y+
    00B24 90E9      LD	R14,Y+
    00B25 90F9      LD	R15,Y+
    00B26 9149      LD	R20,Y+
    00B27 9159      LD	R21,Y+
    00B28 9169      LD	R22,Y+
    00B29 9179      LD	R23,Y+
    00B2A 9508      RET
push_xgsetF0FC:
    00B2B 937A      ST	-Y,R23
    00B2C 936A      ST	-Y,R22
push_xgset30FC:
    00B2D 935A      ST	-Y,R21
    00B2E 934A      ST	-Y,R20
push_xgset00FC:
    00B2F 92FA      ST	-Y,R15
    00B30 92EA      ST	-Y,R14
push_xgset003C:
    00B31 92DA      ST	-Y,R13
    00B32 92CA      ST	-Y,R12
    00B33 92BA      ST	-Y,R11
    00B34 92AA      ST	-Y,R10
    00B35 9508      RET
push_xgset300C:
    00B36 935A      ST	-Y,R21
    00B37 934A      ST	-Y,R20
    00B38 92BA      ST	-Y,R11
    00B39 92AA      ST	-Y,R10
    00B3A 9508      RET
pop_xgset300C:
    00B3B 90A9      LD	R10,Y+
    00B3C 90B9      LD	R11,Y+
    00B3D 9149      LD	R20,Y+
    00B3E 9159      LD	R21,Y+
    00B3F 9508      RET
push_xgsetF000:
    00B40 937A      ST	-Y,R23
    00B41 936A      ST	-Y,R22
    00B42 935A      ST	-Y,R21
    00B43 934A      ST	-Y,R20
    00B44 9508      RET
pop_xgsetF000:
    00B45 9149      LD	R20,Y+
    00B46 9159      LD	R21,Y+
    00B47 9169      LD	R22,Y+
    00B48 9179      LD	R23,Y+
    00B49 9508      RET
push_xgsetF00C:
    00B4A 937A      ST	-Y,R23
    00B4B 936A      ST	-Y,R22
    00B4C 935A      ST	-Y,R21
    00B4D 934A      ST	-Y,R20
    00B4E 92BA      ST	-Y,R11
    00B4F 92AA      ST	-Y,R10
    00B50 9508      RET
pop_xgsetF00C:
    00B51 90A9      LD	R10,Y+
    00B52 90B9      LD	R11,Y+
    00B53 9149      LD	R20,Y+
    00B54 9159      LD	R21,Y+
    00B55 9169      LD	R22,Y+
    00B56 9179      LD	R23,Y+
    00B57 9508      RET
push_xgset303C:
    00B58 935A      ST	-Y,R21
    00B59 934A      ST	-Y,R20
    00B5A 92DA      ST	-Y,R13
    00B5B 92CA      ST	-Y,R12
    00B5C 92BA      ST	-Y,R11
    00B5D 92AA      ST	-Y,R10
    00B5E 9508      RET
pop_xgset303C:
    00B5F 90A9      LD	R10,Y+
    00B60 90B9      LD	R11,Y+
    00B61 90C9      LD	R12,Y+
    00B62 90D9      LD	R13,Y+
    00B63 9149      LD	R20,Y+
    00B64 9159      LD	R21,Y+
    00B65 9508      RET
push_xgsetF03C:
    00B66 937A      ST	-Y,R23
    00B67 936A      ST	-Y,R22
    00B68 935A      ST	-Y,R21
    00B69 934A      ST	-Y,R20
    00B6A 92DA      ST	-Y,R13
    00B6B 92CA      ST	-Y,R12
    00B6C 92BA      ST	-Y,R11
    00B6D 92AA      ST	-Y,R10
    00B6E 9508      RET
pop_xgsetF03C:
    00B6F 90A9      LD	R10,Y+
    00B70 90B9      LD	R11,Y+
    00B71 90C9      LD	R12,Y+
    00B72 90D9      LD	R13,Y+
    00B73 9149      LD	R20,Y+
    00B74 9159      LD	R21,Y+
    00B75 9169      LD	R22,Y+
    00B76 9179      LD	R23,Y+
    00B77 9508      RET
xicallx:
    00B78 920A      ST	-Y,R0
    00B79 95D8      ELPM
    00B7A 920A      ST	-Y,R0
    00B7B 9631      ADIW	R30,1
    00B7C 95D8      ELPM
    00B7D 2DF0      MOV	R31,R0
    00B7E 91E9      LD	R30,Y+
    00B7F 9009      LD	R0,Y+
    00B80 9409      IJMP
neg32:
    00B81 9500      COM	R16
    00B82 9510      COM	R17
    00B83 9520      COM	R18
    00B84 9530      COM	R19
    00B85 5F0F      SUBI	R16,0xFF
    00B86 4F1F      SBCI	R17,0xFF
    00B87 4F2F      SBCI	R18,0xFF
    00B88 4F3F      SBCI	R19,0xFF
    00B89 9508      RET
asgnblk:
    00B8A 93AA      ST	-Y,R26
    00B8B 93BA      ST	-Y,R27
    00B8C 93EA      ST	-Y,R30
    00B8D 93FA      ST	-Y,R31
    00B8E 920A      ST	-Y,R0
    00B8F 81AF      LDD	R26,Y+7
    00B90 85B8      LDD	R27,Y+8
    00B91 81ED      LDD	R30,Y+5
    00B92 81FE      LDD	R31,Y+6
    00B93 3000      CPI	R16,0
    00B94 0701      CPC	R16,R17
    00B95 F029      BEQ	0x0B9B
    00B96 9001      LD	R0,Z+
    00B97 920D      ST	X+,R0
    00B98 5001      SUBI	R16,1
    00B99 4010      SBCI	R17,0
    00B9A CFF8      RJMP	0x0B93
    00B9B 9009      LD	R0,Y+
    00B9C 91F9      LD	R31,Y+
    00B9D 91E9      LD	R30,Y+
    00B9E 91B9      LD	R27,Y+
    00B9F 91A9      LD	R26,Y+
    00BA0 9624      ADIW	R28,4
    00BA1 9508      RET
fpint:
    00BA2 924A      ST	-Y,R4
    00BA3 925A      ST	-Y,R5
    00BA4 926A      ST	-Y,R6
    00BA5 938A      ST	-Y,R24
    00BA6 940E 0C08 CALL	unpacku
    00BA8 F111      BEQ	0x0BCB
    00BA9 2055      TST	R5
    00BAA F0E2      BMI	0x0BC7
    00BAB E18F      LDI	R24,0x1F
    00BAC 1648      CP	R4,R24
    00BAD F4C0      BCC	0x0BC6
    00BAE E187      LDI	R24,0x17
    00BAF 1648      CP	R4,R24
    00BB0 F0D1      BEQ	0x0BCB
    00BB1 F458      BCC	0x0BBD
    00BB2 9441      NEG	R4
    00BB3 EE89      LDI	R24,0xE9
    00BB4 1A48      SUB	R4,R24
    00BB5 C005      RJMP	0x0BBB
    00BB6 9535      ASR	R19
    00BB7 9527      ROR	R18
    00BB8 9517      ROR	R17
    00BB9 9507      ROR	R16
    00BBA 944A      DEC	R4
    00BBB F7D1      BNE	0x0BB6
    00BBC C00E      RJMP	0x0BCB
    00BBD E187      LDI	R24,0x17
    00BBE 1A48      SUB	R4,R24
    00BBF 0F00      LSL	R16
    00BC0 1F11      ROL	R17
    00BC1 1F22      ROL	R18
    00BC2 1F33      ROL	R19
    00BC3 944A      DEC	R4
    00BC4 F7D1      BNE	0x0BBF
    00BC5 C005      RJMP	0x0BCB
    00BC6 E73F      LDI	R19,0x7F
    00BC7 2F23      MOV	R18,R19
    00BC8 2F13      MOV	R17,R19
    00BC9 2F03      MOV	R16,R19
    00BCA C004      RJMP	0x0BCF
    00BCB 2066      TST	R6
    00BCC F011      BEQ	0x0BCF
    00BCD 940E 0B81 CALL	neg32
    00BCF 9189      LD	R24,Y+
    00BD0 9069      LD	R6,Y+
    00BD1 9059      LD	R5,Y+
    00BD2 9049      LD	R4,Y+
    00BD3 9508      RET
uint2fp:
    00BD4 9468      BSET	6
    00BD5 C001      RJMP	0x0BD7
int2fp:
    00BD6 94E8      BCLR	6
    00BD7 2722      CLR	R18
    00BD8 2733      CLR	R19
    00BD9 F046      BRTS	0x0BE2
    00BDA FD17      SBRC	R17,7
    00BDB 9520      COM	R18
    00BDC FD17      SBRC	R17,7
    00BDD 9530      COM	R19
    00BDE C003      RJMP	0x0BE2
ulong2fp:
    00BDF 9468      BSET	6
    00BE0 C001      RJMP	0x0BE2
long2fp:
    00BE1 94E8      BCLR	6
    00BE2 924A      ST	-Y,R4
    00BE3 925A      ST	-Y,R5
    00BE4 926A      ST	-Y,R6
    00BE5 938A      ST	-Y,R24
    00BE6 E187      LDI	R24,0x17
    00BE7 2E48      MOV	R4,R24
    00BE8 2455      CLR	R5
    00BE9 2466      CLR	R6
    00BEA F036      BRTS	0x0BF1
    00BEB 2333      TST	R19
    00BEC F422      BPL	0x0BF1
    00BED 940E 0B81 CALL	neg32
    00BEF E880      LDI	R24,0x80
    00BF0 2E68      MOV	R6,R24
    00BF1 940E 0C21 CALL	normalize_and_pack
    00BF3 9189      LD	R24,Y+
    00BF4 9069      LD	R6,Y+
    00BF5 9059      LD	R5,Y+
    00BF6 9049      LD	R4,Y+
    00BF7 9508      RET
unpacks:
    00BF8 D00F      RCALL	unpacku
    00BF9 F029      BEQ	0x0BFF
    00BFA 2066      TST	R6
    00BFB F011      BEQ	0x0BFE
    00BFC 940E 0B81 CALL	neg32
    00BFE 9498      BCLR	1
    00BFF 9508      RET
tstR16_R19:
    00C00 2300      TST	R16
    00C01 F429      BNE	0x0C07
    00C02 2311      TST	R17
    00C03 F419      BNE	0x0C07
    00C04 2322      TST	R18
    00C05 F409      BNE	0x0C07
    00C06 2333      TST	R19
    00C07 9508      RET
unpacku:
    00C08 DFF7      RCALL	tstR16_R19
    00C09 F099      BEQ	0x0C1D
    00C0A 938A      ST	-Y,R24
    00C0B 2E63      MOV	R6,R19
    00C0C E880      LDI	R24,0x80
    00C0D 2268      AND	R6,R24
    00C0E 0F22      LSL	R18
    00C0F 1F33      ROL	R19
    00C10 2E43      MOV	R4,R19
    00C11 E78F      LDI	R24,0x7F
    00C12 1A48      SUB	R4,R24
    00C13 2455      CLR	R5
    00C14 2788      CLR	R24
    00C15 0A58      SBC	R5,R24
    00C16 9526      LSR	R18
    00C17 E830      LDI	R19,0x80
    00C18 2B23      OR	R18,R19
    00C19 2733      CLR	R19
    00C1A 9189      LD	R24,Y+
    00C1B 9498      BCLR	1
    00C1C 9508      RET
    00C1D 2444      CLR	R4
    00C1E 2455      CLR	R5
    00C1F 2466      CLR	R6
    00C20 9508      RET
normalize_and_pack:
    00C21 DFDE      RCALL	tstR16_R19
    00C22 F409      BNE	0x0C24
    00C23 9508      RET
    00C24 93AA      ST	-Y,R26
    00C25 93BA      ST	-Y,R27
    00C26 01D2      MOVW	R26,R4
    00C27 939A      ST	-Y,R25
    00C28 938A      ST	-Y,R24
    00C29 E78E      LDI	R24,0x7E
    00C2A E090      LDI	R25,0
    00C2B 2333      TST	R19
    00C2C F049      BEQ	0x0C36
    00C2D 9536      LSR	R19
    00C2E 9527      ROR	R18
    00C2F 9517      ROR	R17
    00C30 9507      ROR	R16
    00C31 17A8      CP	R26,R24
    00C32 07B9      CPC	R27,R25
    00C33 F4CC      BGE	0x0C4D
    00C34 9611      ADIW	R26,1
    00C35 CFF5      RJMP	0x0C2B
    00C36 9580      COM	R24
    00C37 9590      COM	R25
    00C38 9601      ADIW	R24,1
    00C39 2322      TST	R18
    00C3A F0BA      BMI	0x0C52
    00C3B 0F00      LSL	R16
    00C3C 1F11      ROL	R17
    00C3D 1F22      ROL	R18
    00C3E 17A8      CP	R26,R24
    00C3F 07B9      CPC	R27,R25
    00C40 F014      BLT	0x0C43
    00C41 9711      SBIW	R26,1
    00C42 CFF6      RJMP	0x0C39
    00C43 2700      CLR	R16
    00C44 2711      CLR	R17
    00C45 2722      CLR	R18
    00C46 2733      CLR	R19
    00C47 9189      LD	R24,Y+
    00C48 9199      LD	R25,Y+
    00C49 012D      MOVW	R4,R26
    00C4A 91B9      LD	R27,Y+
    00C4B 91A9      LD	R26,Y+
    00C4C 9508      RET
    00C4D 2733      CLR	R19
    00C4E EF0F      LDI	R16,0xFF
    00C4F 2F10      MOV	R17,R16
    00C50 E72F      LDI	R18,0x7F
    00C51 2F32      MOV	R19,R18
    00C52 9189      LD	R24,Y+
    00C53 9199      LD	R25,Y+
    00C54 012D      MOVW	R4,R26
    00C55 C002      RJMP	0x0C58
pack:
    00C56 93AA      ST	-Y,R26
    00C57 93BA      ST	-Y,R27
    00C58 DFA7      RCALL	tstR16_R19
    00C59 F049      BEQ	0x0C63
    00C5A 01D2      MOVW	R26,R4
    00C5B 58A1      SUBI	R26,0x81
    00C5C 4FBF      SBCI	R27,0xFF
    00C5D 012D      MOVW	R4,R26
    00C5E 2D34      MOV	R19,R4
    00C5F 0F22      LSL	R18
    00C60 9536      LSR	R19
    00C61 9527      ROR	R18
    00C62 2936      OR	R19,R6
    00C63 91B9      LD	R27,Y+
    00C64 91A9      LD	R26,Y+
    00C65 9508      RET
saveFPRegs:
    00C66 924A      ST	-Y,R4
    00C67 925A      ST	-Y,R5
    00C68 926A      ST	-Y,R6
    00C69 927A      ST	-Y,R7
    00C6A 928A      ST	-Y,R8
    00C6B 929A      ST	-Y,R9
    00C6C 92AA      ST	-Y,R10
    00C6D 92BA      ST	-Y,R11
    00C6E 92CA      ST	-Y,R12
    00C6F 92DA      ST	-Y,R13
    00C70 92EA      ST	-Y,R14
    00C71 92FA      ST	-Y,R15
    00C72 938A      ST	-Y,R24
    00C73 939A      ST	-Y,R25
    00C74 9508      RET
restoreFPRegs:
    00C75 9199      LD	R25,Y+
    00C76 9189      LD	R24,Y+
    00C77 90F9      LD	R15,Y+
    00C78 90E9      LD	R14,Y+
    00C79 90D9      LD	R13,Y+
    00C7A 90C9      LD	R12,Y+
    00C7B 90B9      LD	R11,Y+
    00C7C 90A9      LD	R10,Y+
    00C7D 9099      LD	R9,Y+
    00C7E 9089      LD	R8,Y+
    00C7F 9079      LD	R7,Y+
    00C80 9069      LD	R6,Y+
    00C81 9059      LD	R5,Y+
    00C82 9049      LD	R4,Y+
    00C83 9508      RET
fpmule:
    00C84 940E 0C66 CALL	saveFPRegs
    00C86 93AA      ST	-Y,R26
    00C87 93BA      ST	-Y,R27
    00C88 940E 0C08 CALL	unpacku
    00C8A F1E1      BEQ	0x0CC7
    00C8B 2CE6      MOV	R14,R6
    00C8C 2CD5      MOV	R13,R5
    00C8D 2CC4      MOV	R12,R4
    00C8E 2EB3      MOV	R11,R19
    00C8F 2EA2      MOV	R10,R18
    00C90 2E91      MOV	R9,R17
    00C91 2E80      MOV	R8,R16
    00C92 8100      LD	R16,Z
    00C93 8111      LDD	R17,Z+1
    00C94 8122      LDD	R18,Z+2
    00C95 8133      LDD	R19,Z+3
    00C96 940E 0C08 CALL	unpacku
    00C98 F171      BEQ	0x0CC7
    00C99 246E      EOR	R6,R14
    00C9A 0C4C      ADD	R4,R12
    00C9B 1C5D      ADC	R5,R13
    00C9C E880      LDI	R24,0x80
    00C9D 1648      CP	R4,R24
    00C9E 0653      CPC	R5,R19
    00C9F F564      BGE	0x0CCC
    00CA0 E881      LDI	R24,0x81
    00CA1 1648      CP	R4,R24
    00CA2 EF8F      LDI	R24,0xFF
    00CA3 0658      CPC	R5,R24
    00CA4 F16C      BLT	0x0CD2
    00CA5 9EA2      MUL	R10,R18
    00CA6 2DB1      MOV	R27,R1
    00CA7 2DA0      MOV	R26,R0
    00CA8 9E91      MUL	R9,R17
    00CA9 2D91      MOV	R25,R1
    00CAA 2D80      MOV	R24,R0
    00CAB 9EA0      MUL	R10,R16
    00CAC 0D80      ADD	R24,R0
    00CAD 1D91      ADC	R25,R1
    00CAE 1FA3      ADC	R26,R19
    00CAF 1FB3      ADC	R27,R19
    00CB0 9E82      MUL	R8,R18
    00CB1 0D80      ADD	R24,R0
    00CB2 1D91      ADC	R25,R1
    00CB3 1FA3      ADC	R26,R19
    00CB4 1FB3      ADC	R27,R19
    00CB5 9E92      MUL	R9,R18
    00CB6 0D90      ADD	R25,R0
    00CB7 1DA1      ADC	R26,R1
    00CB8 1FB3      ADC	R27,R19
    00CB9 9EA1      MUL	R10,R17
    00CBA 0D90      ADD	R25,R0
    00CBB 1DA1      ADC	R26,R1
    00CBC 1FB3      ADC	R27,R19
    00CBD 2F2B      MOV	R18,R27
    00CBE 2F1A      MOV	R17,R26
    00CBF 2F09      MOV	R16,R25
    00CC0 0F88      LSL	R24
    00CC1 1F00      ROL	R16
    00CC2 1F11      ROL	R17
    00CC3 1F22      ROL	R18
    00CC4 1F33      ROL	R19
    00CC5 940E 0C21 CALL	normalize_and_pack
    00CC7 91B9      LD	R27,Y+
    00CC8 91A9      LD	R26,Y+
    00CC9 940E 0C75 CALL	restoreFPRegs
    00CCB 9508      RET
    00CCC EF0F      LDI	R16,0xFF
    00CCD 2F10      MOV	R17,R16
    00CCE E72F      LDI	R18,0x7F
    00CCF E78F      LDI	R24,0x7F
    00CD0 2E48      MOV	R4,R24
    00CD1 CFF5      RJMP	0x0CC7
    00CD2 2700      CLR	R16
    00CD3 2F10      MOV	R17,R16
    00CD4 2F20      MOV	R18,R16
    00CD5 2F30      MOV	R19,R16
    00CD6 CFF0      RJMP	0x0CC7
fpmule2:
    00CD7 93FA      ST	-Y,R31
    00CD8 93EA      ST	-Y,R30
    00CD9 2FEC      MOV	R30,R28
    00CDA 2FFD      MOV	R31,R29
    00CDB 9632      ADIW	R30,2
    00CDC 940E 0C84 CALL	fpmule
    00CDE 91E9      LD	R30,Y+
    00CDF 91F9      LD	R31,Y+
    00CE0 9624      ADIW	R28,4
    00CE1 9508      RET
_itoa:
    00CE2 940E 0AEB CALL	push_arg4
    00CE4 940E 0B2B CALL	push_xgsetF0FC
    00CE6 01A9      MOVW	R20,R18
    00CE7 84EE      LDD	R14,Y+14
    00CE8 84FF      LDD	R15,Y+15
    00CE9 015A      MOVW	R10,R20
    00CEA 20AA      TST	R10
    00CEB F451      BNE	0x0CF6
    00CEC 20BB      TST	R11
    00CED F441      BNE	0x0CF6
    00CEE E380      LDI	R24,0x30
    00CEF 85EA      LDD	R30,Y+10
    00CF0 85FB      LDD	R31,Y+11
    00CF1 8380      ST	Z,R24
    00CF2 2422      CLR	R2
    00CF3 8221      STD	Z+1,R2
    00CF4 018F      MOVW	R16,R30
    00CF5 C053      RJMP	0x0D49
    00CF6 3040      CPI	R20,0
    00CF7 E0E0      LDI	R30,0
    00CF8 075E      CPC	R21,R30
    00CF9 F46C      BGE	0x0D07
    00CFA 01C7      MOVW	R24,R14
    00CFB 308A      CPI	R24,0xA
    00CFC E0E0      LDI	R30,0
    00CFD 079E      CPC	R25,R30
    00CFE F441      BNE	0x0D07
    00CFF 24CC      CLR	R12
    00D00 94C3      INC	R12
    00D01 01C5      MOVW	R24,R10
    00D02 9580      COM	R24
    00D03 9590      COM	R25
    00D04 9601      ADIW	R24,1
    00D05 015C      MOVW	R10,R24
    00D06 C001      RJMP	0x0D08
    00D07 24CC      CLR	R12
    00D08 856A      LDD	R22,Y+10
    00D09 857B      LDD	R23,Y+11
    00D0A 0197      MOVW	R18,R14
    00D0B 0185      MOVW	R16,R10
    00D0C 940E 0AF0 CALL	mod16u
    00D0E 01A8      MOVW	R20,R16
    00D0F E089      LDI	R24,0x9
    00D10 E090      LDI	R25,0
    00D11 1780      CP	R24,R16
    00D12 0791      CPC	R25,R17
    00D13 F034      BLT	0x0D1A
    00D14 01CA      MOVW	R24,R20
    00D15 96C0      ADIW	R24,0x30
    00D16 01FB      MOVW	R30,R22
    00D17 9381      ST	Z+,R24
    00D18 01BF      MOVW	R22,R30
    00D19 C006      RJMP	0x0D20
    00D1A 01CA      MOVW	R24,R20
    00D1B 5A89      SUBI	R24,0xA9
    00D1C 4F9F      SBCI	R25,0xFF
    00D1D 01FB      MOVW	R30,R22
    00D1E 9381      ST	Z+,R24
    00D1F 01BF      MOVW	R22,R30
    00D20 0197      MOVW	R18,R14
    00D21 0185      MOVW	R16,R10
    00D22 940E 0AF2 CALL	div16u
    00D24 0158      MOVW	R10,R16
    00D25 20AA      TST	R10
    00D26 F719      BNE	0x0D0A
    00D27 20BB      TST	R11
    00D28 F709      BNE	0x0D0A
    00D29 20CC      TST	R12
    00D2A F021      BEQ	0x0D2F
    00D2B E28D      LDI	R24,0x2D
    00D2C 01FB      MOVW	R30,R22
    00D2D 9381      ST	Z+,R24
    00D2E 01BF      MOVW	R22,R30
    00D2F 012B      MOVW	R4,R22
    00D30 5061      SUBI	R22,1
    00D31 4070      SBCI	R23,0
    00D32 2422      CLR	R2
    00D33 01F2      MOVW	R30,R4
    00D34 8220      ST	Z,R2
    00D35 84AA      LDD	R10,Y+10
    00D36 84BB      LDD	R11,Y+11
    00D37 C00C      RJMP	0x0D44
    00D38 01F5      MOVW	R30,R10
    00D39 80C0      LD	R12,Z
    00D3A 01FB      MOVW	R30,R22
    00D3B 8020      LD	R2,Z
    00D3C 01F5      MOVW	R30,R10
    00D3D 9221      ST	Z+,R2
    00D3E 015F      MOVW	R10,R30
    00D3F 011B      MOVW	R2,R22
    00D40 5061      SUBI	R22,1
    00D41 4070      SBCI	R23,0
    00D42 01F1      MOVW	R30,R2
    00D43 82C0      ST	Z,R12
    00D44 16A6      CP	R10,R22
    00D45 06B7      CPC	R11,R23
    00D46 F388      BCS	0x0D38
    00D47 850A      LDD	R16,Y+10
    00D48 851B      LDD	R17,Y+11
    00D49 940E 0B20 CALL	pop_xgsetF0FC
    00D4B 9624      ADIW	R28,4
    00D4C 9508      RET
_utoa:
    00D4D 940E 0B2B CALL	push_xgsetF0FC
    00D4F 0169      MOVW	R12,R18
    00D50 0158      MOVW	R10,R16
    00D51 84EA      LDD	R14,Y+10
    00D52 84FB      LDD	R15,Y+11
    00D53 01A5      MOVW	R20,R10
    00D54 0197      MOVW	R18,R14
    00D55 0186      MOVW	R16,R12
    00D56 940E 0AF0 CALL	mod16u
    00D58 01B8      MOVW	R22,R16
    00D59 E089      LDI	R24,0x9
    00D5A E090      LDI	R25,0
    00D5B 1780      CP	R24,R16
    00D5C 0791      CPC	R25,R17
    00D5D F034      BLT	0x0D64
    00D5E 01CB      MOVW	R24,R22
    00D5F 96C0      ADIW	R24,0x30
    00D60 01FA      MOVW	R30,R20
    00D61 9381      ST	Z+,R24
    00D62 01AF      MOVW	R20,R30
    00D63 C006      RJMP	0x0D6A
    00D64 01CB      MOVW	R24,R22
    00D65 5A89      SUBI	R24,0xA9
    00D66 4F9F      SBCI	R25,0xFF
    00D67 01FA      MOVW	R30,R20
    00D68 9381      ST	Z+,R24
    00D69 01AF      MOVW	R20,R30
    00D6A 0197      MOVW	R18,R14
    00D6B 0186      MOVW	R16,R12
    00D6C 940E 0AF2 CALL	div16u
    00D6E 0168      MOVW	R12,R16
    00D6F 20CC      TST	R12
    00D70 F719      BNE	0x0D54
    00D71 20DD      TST	R13
    00D72 F709      BNE	0x0D54
    00D73 012A      MOVW	R4,R20
    00D74 5041      SUBI	R20,1
    00D75 4050      SBCI	R21,0
    00D76 2422      CLR	R2
    00D77 01F2      MOVW	R30,R4
    00D78 8220      ST	Z,R2
    00D79 0165      MOVW	R12,R10
    00D7A C00C      RJMP	0x0D87
    00D7B 01F6      MOVW	R30,R12
    00D7C 80E0      LD	R14,Z
    00D7D 01FA      MOVW	R30,R20
    00D7E 8020      LD	R2,Z
    00D7F 01F6      MOVW	R30,R12
    00D80 9221      ST	Z+,R2
    00D81 016F      MOVW	R12,R30
    00D82 011A      MOVW	R2,R20
    00D83 5041      SUBI	R20,1
    00D84 4050      SBCI	R21,0
    00D85 01F1      MOVW	R30,R2
    00D86 82E0      ST	Z,R14
    00D87 16C4      CP	R12,R20
    00D88 06D5      CPC	R13,R21
    00D89 F388      BCS	0x0D7B
    00D8A 0185      MOVW	R16,R10
    00D8B 940C 0B20 JMP	pop_xgsetF0FC
_islower:
    00D8D E983      LDI	R24,0x93
    00D8E E090      LDI	R25,0
    00D8F 01F8      MOVW	R30,R16
    00D90 0FE8      ADD	R30,R24
    00D91 1FF9      ADC	R31,R25
    00D92 9106      ELPM	R16,Z
    00D93 2711      CLR	R17
    00D94 7002      ANDI	R16,2
    00D95 7010      ANDI	R17,0
    00D96 9508      RET
_toupper:
    00D97 934A      ST	-Y,R20
    00D98 935A      ST	-Y,R21
    00D99 01A8      MOVW	R20,R16
    00D9A 018A      MOVW	R16,R20
    00D9B 940E 0D8D CALL	_islower
    00D9D 3000      CPI	R16,0
    00D9E 0701      CPC	R16,R17
    00D9F F031      BEQ	0x0DA6
    00DA0 018A      MOVW	R16,R20
    00DA1 5601      SUBI	R16,0x61
    00DA2 4010      SBCI	R17,0
    00DA3 5B0F      SUBI	R16,0xBF
    00DA4 4F1F      SBCI	R17,0xFF
    00DA5 C001      RJMP	0x0DA7
    00DA6 018A      MOVW	R16,R20
    00DA7 9159      LD	R21,Y+
    00DA8 9149      LD	R20,Y+
    00DA9 9508      RET
__print:
    00DAA 940E 0AEB CALL	push_arg4
    00DAC 940E 0B2B CALL	push_xgsetF0FC
    00DAE 9724      SBIW	R28,4
    00DAF 896A      LDD	R22,Y+18
    00DB0 897B      LDD	R23,Y+19
    00DB1 2744      CLR	R20
    00DB2 2755      CLR	R21
    00DB3 C137      RJMP	0x0EEB
    00DB4 89E8      LDD	R30,Y+16
    00DB5 89F9      LDD	R31,Y+17
    00DB6 8180      LD	R24,Z
    00DB7 3285      CPI	R24,0x25
    00DB8 F041      BEQ	0x0DC1
    00DB9 8100      LD	R16,Z
    00DBA 85EE      LDD	R30,Y+14
    00DBB 85FF      LDD	R31,Y+15
    00DBC 940E 0B78 CALL	xicallx
    00DBE 5F4F      SUBI	R20,0xFF
    00DBF 4F5F      SBCI	R21,0xFF
    00DC0 C125      RJMP	0x0EE6
    00DC1 E680      LDI	R24,0x60
    00DC2 E095      LDI	R25,5
    00DC3 015C      MOVW	R10,R24
    00DC4 E280      LDI	R24,0x20
    00DC5 2EC8      MOV	R12,R24
    00DC6 8988      LDD	R24,Y+16
    00DC7 8999      LDD	R25,Y+17
    00DC8 9601      ADIW	R24,1
    00DC9 8B99      STD	Y+17,R25
    00DCA 8B88      STD	Y+16,R24
    00DCB 01FC      MOVW	R30,R24
    00DCC 80E0      LD	R14,Z
    00DCD 24FF      CLR	R15
    00DCE 01C7      MOVW	R24,R14
    00DCF 3588      CPI	R24,0x58
    00DD0 E0E0      LDI	R30,0
    00DD1 079E      CPC	R25,R30
    00DD2 F409      BNE	0x0DD4
    00DD3 C065      RJMP	0x0E39
    00DD4 E588      LDI	R24,0x58
    00DD5 158E      CP	R24,R14
    00DD6 059F      CPC	R25,R15
    00DD7 F094      BLT	0x0DEA
    00DD8 01C7      MOVW	R24,R14
    00DD9 3485      CPI	R24,0x45
    00DDA E0E0      LDI	R30,0
    00DDB 079E      CPC	R25,R30
    00DDC F409      BNE	0x0DDE
    00DDD C104      RJMP	0x0EE2
    00DDE 3485      CPI	R24,0x45
    00DDF E0E0      LDI	R30,0
    00DE0 079E      CPC	R25,R30
    00DE1 F40C      BGE	0x0DE3
    00DE2 C03D      RJMP	0x0E20
    00DE3 01C7      MOVW	R24,R14
    00DE4 3583      CPI	R24,0x53
    00DE5 E0E0      LDI	R30,0
    00DE6 079E      CPC	R25,R30
    00DE7 F409      BNE	0x0DE9
    00DE8 C0AF      RJMP	0x0E98
    00DE9 C036      RJMP	0x0E20
    00DEA 01C7      MOVW	R24,R14
    00DEB 3683      CPI	R24,0x63
    00DEC E0E0      LDI	R30,0
    00DED 079E      CPC	R25,R30
    00DEE F409      BNE	0x0DF0
    00DEF C099      RJMP	0x0E89
    00DF0 3684      CPI	R24,0x64
    00DF1 E0E0      LDI	R30,0
    00DF2 079E      CPC	R25,R30
    00DF3 F409      BNE	0x0DF5
    00DF4 C035      RJMP	0x0E2A
    00DF5 3685      CPI	R24,0x65
    00DF6 E0E0      LDI	R30,0
    00DF7 079E      CPC	R25,R30
    00DF8 F409      BNE	0x0DFA
    00DF9 C0E8      RJMP	0x0EE2
    00DFA 3686      CPI	R24,0x66
    00DFB E0E0      LDI	R30,0
    00DFC 079E      CPC	R25,R30
    00DFD F409      BNE	0x0DFF
    00DFE C0E3      RJMP	0x0EE2
    00DFF 3689      CPI	R24,0x69
    00E00 E0E0      LDI	R30,0
    00E01 079E      CPC	R25,R30
    00E02 F139      BEQ	0x0E2A
    00E03 368F      CPI	R24,0x6F
    00E04 E0E0      LDI	R30,0
    00E05 079E      CPC	R25,R30
    00E06 F409      BNE	0x0E08
    00E07 C031      RJMP	0x0E39
    00E08 3780      CPI	R24,0x70
    00E09 E0E0      LDI	R30,0
    00E0A 079E      CPC	R25,R30
    00E0B F409      BNE	0x0E0D
    00E0C C02C      RJMP	0x0E39
    00E0D 3683      CPI	R24,0x63
    00E0E E0E0      LDI	R30,0
    00E0F 079E      CPC	R25,R30
    00E10 F07C      BLT	0x0E20
    00E11 01C7      MOVW	R24,R14
    00E12 3783      CPI	R24,0x73
    00E13 E0E0      LDI	R30,0
    00E14 079E      CPC	R25,R30
    00E15 F409      BNE	0x0E17
    00E16 C0A2      RJMP	0x0EB9
    00E17 3785      CPI	R24,0x75
    00E18 E0E0      LDI	R30,0
    00E19 079E      CPC	R25,R30
    00E1A F0F1      BEQ	0x0E39
    00E1B 3788      CPI	R24,0x78
    00E1C E0E0      LDI	R30,0
    00E1D 079E      CPC	R25,R30
    00E1E F0D1      BEQ	0x0E39
    00E1F C000      RJMP	0x0E20
    00E20 89E8      LDD	R30,Y+16
    00E21 89F9      LDD	R31,Y+17
    00E22 8100      LD	R16,Z
    00E23 85EE      LDD	R30,Y+14
    00E24 85FF      LDD	R31,Y+15
    00E25 940E 0B78 CALL	xicallx
    00E27 5F4F      SUBI	R20,0xFF
    00E28 4F5F      SBCI	R21,0xFF
    00E29 C0BC      RJMP	0x0EE6
    00E2A 5F6E      SUBI	R22,0xFE
    00E2B 4F7F      SBCI	R23,0xFF
    00E2C 01FB      MOVW	R30,R22
    00E2D 9732      SBIW	R30,2
    00E2E 80E0      LD	R14,Z
    00E2F 80F1      LDD	R15,Z+1
    00E30 E08A      LDI	R24,0xA
    00E31 E090      LDI	R25,0
    00E32 8399      STD	Y+1,R25
    00E33 8388      ST	Y,R24
    00E34 0197      MOVW	R18,R14
    00E35 0185      MOVW	R16,R10
    00E36 940E 0CE2 CALL	_itoa
    00E38 C04C      RJMP	0x0E85
    00E39 5F6E      SUBI	R22,0xFE
    00E3A 4F7F      SBCI	R23,0xFF
    00E3B 01FB      MOVW	R30,R22
    00E3C 9732      SBIW	R30,2
    00E3D 80E0      LD	R14,Z
    00E3E 80F1      LDD	R15,Z+1
    00E3F 89E8      LDD	R30,Y+16
    00E40 89F9      LDD	R31,Y+17
    00E41 8180      LD	R24,Z
    00E42 3785      CPI	R24,0x75
    00E43 F449      BNE	0x0E4D
    00E44 E08A      LDI	R24,0xA
    00E45 E090      LDI	R25,0
    00E46 8399      STD	Y+1,R25
    00E47 8388      ST	Y,R24
    00E48 0197      MOVW	R18,R14
    00E49 0185      MOVW	R16,R10
    00E4A 940E 0D4D CALL	_utoa
    00E4C C038      RJMP	0x0E85
    00E4D 89E8      LDD	R30,Y+16
    00E4E 89F9      LDD	R31,Y+17
    00E4F 8180      LD	R24,Z
    00E50 368F      CPI	R24,0x6F
    00E51 F449      BNE	0x0E5B
    00E52 E088      LDI	R24,0x8
    00E53 E090      LDI	R25,0
    00E54 8399      STD	Y+1,R25
    00E55 8388      ST	Y,R24
    00E56 0197      MOVW	R18,R14
    00E57 0185      MOVW	R16,R10
    00E58 940E 0D4D CALL	_utoa
    00E5A C02A      RJMP	0x0E85
    00E5B 89E8      LDD	R30,Y+16
    00E5C 89F9      LDD	R31,Y+17
    00E5D 8180      LD	R24,Z
    00E5E 3780      CPI	R24,0x70
    00E5F F431      BNE	0x0E66
    00E60 E380      LDI	R24,0x30
    00E61 01F5      MOVW	R30,R10
    00E62 9381      ST	Z+,R24
    00E63 E788      LDI	R24,0x78
    00E64 9381      ST	Z+,R24
    00E65 015F      MOVW	R10,R30
    00E66 E180      LDI	R24,0x10
    00E67 E090      LDI	R25,0
    00E68 8399      STD	Y+1,R25
    00E69 8388      ST	Y,R24
    00E6A 0197      MOVW	R18,R14
    00E6B 0185      MOVW	R16,R10
    00E6C 940E 0D4D CALL	_utoa
    00E6E 89E8      LDD	R30,Y+16
    00E6F 89F9      LDD	R31,Y+17
    00E70 8180      LD	R24,Z
    00E71 3588      CPI	R24,0x58
    00E72 F491      BNE	0x0E85
    00E73 E680      LDI	R24,0x60
    00E74 E095      LDI	R25,5
    00E75 015C      MOVW	R10,R24
    00E76 C00A      RJMP	0x0E81
    00E77 01F5      MOVW	R30,R10
    00E78 8100      LD	R16,Z
    00E79 2711      CLR	R17
    00E7A 940E 0D97 CALL	_toupper
    00E7C 01F5      MOVW	R30,R10
    00E7D 8300      ST	Z,R16
    00E7E 01C5      MOVW	R24,R10
    00E7F 9601      ADIW	R24,1
    00E80 015C      MOVW	R10,R24
    00E81 01F5      MOVW	R30,R10
    00E82 8020      LD	R2,Z
    00E83 2022      TST	R2
    00E84 F791      BNE	0x0E77
    00E85 E680      LDI	R24,0x60
    00E86 E095      LDI	R25,5
    00E87 015C      MOVW	R10,R24
    00E88 C03E      RJMP	0x0EC7
    00E89 5F6E      SUBI	R22,0xFE
    00E8A 4F7F      SBCI	R23,0xFF
    00E8B 01FB      MOVW	R30,R22
    00E8C 9732      SBIW	R30,2
    00E8D 8020      LD	R2,Z
    00E8E 8031      LDD	R3,Z+1
    00E8F 822A      STD	Y+2,R2
    00E90 2D02      MOV	R16,R2
    00E91 85EE      LDD	R30,Y+14
    00E92 85FF      LDD	R31,Y+15
    00E93 940E 0B78 CALL	xicallx
    00E95 5F4F      SUBI	R20,0xFF
    00E96 4F5F      SBCI	R21,0xFF
    00E97 C04E      RJMP	0x0EE6
    00E98 5F6E      SUBI	R22,0xFE
    00E99 4F7F      SBCI	R23,0xFF
    00E9A 01FB      MOVW	R30,R22
    00E9B 9732      SBIW	R30,2
    00E9C 80E0      LD	R14,Z
    00E9D 80F1      LDD	R15,Z+1
    00E9E 2D8C      MOV	R24,R12
    00E9F 328D      CPI	R24,0x2D
    00EA0 F499      BNE	0x0EB4
    00EA1 E20D      LDI	R16,0x2D
    00EA2 85EE      LDD	R30,Y+14
    00EA3 85FF      LDD	R31,Y+15
    00EA4 940E 0B78 CALL	xicallx
    00EA6 5F4F      SUBI	R20,0xFF
    00EA7 4F5F      SBCI	R21,0xFF
    00EA8 C00B      RJMP	0x0EB4
    00EA9 01F7      MOVW	R30,R14
    00EAA 9106      ELPM	R16,Z
    00EAB 85EE      LDD	R30,Y+14
    00EAC 85FF      LDD	R31,Y+15
    00EAD 940E 0B78 CALL	xicallx
    00EAF 5F4F      SUBI	R20,0xFF
    00EB0 4F5F      SBCI	R21,0xFF
    00EB1 01C7      MOVW	R24,R14
    00EB2 9601      ADIW	R24,1
    00EB3 017C      MOVW	R14,R24
    00EB4 01F7      MOVW	R30,R14
    00EB5 9026      ELPM	R2,Z
    00EB6 2022      TST	R2
    00EB7 F789      BNE	0x0EA9
    00EB8 C02D      RJMP	0x0EE6
    00EB9 5F6E      SUBI	R22,0xFE
    00EBA 4F7F      SBCI	R23,0xFF
    00EBB 01FB      MOVW	R30,R22
    00EBC 9732      SBIW	R30,2
    00EBD 80A0      LD	R10,Z
    00EBE 80B1      LDD	R11,Z+1
    00EBF 20AA      TST	R10
    00EC0 F431      BNE	0x0EC7
    00EC1 20BB      TST	R11
    00EC2 F421      BNE	0x0EC7
    00EC3 E983      LDI	R24,0x93
    00EC4 E091      LDI	R25,1
    00EC5 017C      MOVW	R14,R24
    00EC6 CFD7      RJMP	0x0E9E
    00EC7 2D8C      MOV	R24,R12
    00EC8 328D      CPI	R24,0x2D
    00EC9 F499      BNE	0x0EDD
    00ECA E20D      LDI	R16,0x2D
    00ECB 85EE      LDD	R30,Y+14
    00ECC 85FF      LDD	R31,Y+15
    00ECD 940E 0B78 CALL	xicallx
    00ECF 5F4F      SUBI	R20,0xFF
    00ED0 4F5F      SBCI	R21,0xFF
    00ED1 C00B      RJMP	0x0EDD
    00ED2 01F5      MOVW	R30,R10
    00ED3 8100      LD	R16,Z
    00ED4 85EE      LDD	R30,Y+14
    00ED5 85FF      LDD	R31,Y+15
    00ED6 940E 0B78 CALL	xicallx
    00ED8 5F4F      SUBI	R20,0xFF
    00ED9 4F5F      SBCI	R21,0xFF
    00EDA 01C5      MOVW	R24,R10
    00EDB 9601      ADIW	R24,1
    00EDC 015C      MOVW	R10,R24
    00EDD 01F5      MOVW	R30,R10
    00EDE 8020      LD	R2,Z
    00EDF 2022      TST	R2
    00EE0 F789      BNE	0x0ED2
    00EE1 C004      RJMP	0x0EE6
    00EE2 EA85      LDI	R24,0xA5
    00EE3 E091      LDI	R25,1
    00EE4 017C      MOVW	R14,R24
    00EE5 CFB8      RJMP	0x0E9E
    00EE6 8988      LDD	R24,Y+16
    00EE7 8999      LDD	R25,Y+17
    00EE8 9601      ADIW	R24,1
    00EE9 8B99      STD	Y+17,R25
    00EEA 8B88      STD	Y+16,R24
    00EEB 89E8      LDD	R30,Y+16
    00EEC 89F9      LDD	R31,Y+17
    00EED 8020      LD	R2,Z
    00EEE 2022      TST	R2
    00EEF F009      BEQ	0x0EF1
    00EF0 CEC3      RJMP	0x0DB4
    00EF1 018A      MOVW	R16,R20
    00EF2 9624      ADIW	R28,4
    00EF3 940E 0B20 CALL	pop_xgsetF0FC
    00EF5 9624      ADIW	R28,4
    00EF6 9508      RET
__sdepi:
    00EF7 91E0 0579 LDS	R30,tmp_text+280
    00EF9 91F0 057A LDS	R31,tmp_text+281
    00EFB 9301      ST	Z+,R16
    00EFC 93F0 057A STS	tmp_text+281,R31
    00EFE 93E0 0579 STS	tmp_text+280,R30
    00F00 9508      RET
_sprintf:
    00F01 940E 0AEB CALL	push_arg4
    00F03 92AA      ST	-Y,R10
    00F04 92BA      ST	-Y,R11
    00F05 9722      SBIW	R28,2
    00F06 802C      LDD	R2,Y+4
    00F07 803D      LDD	R3,Y+5
    00F08 9230 057A STS	tmp_text+281,R3
    00F0A 9220 0579 STS	tmp_text+280,R2
    00F0C 01CE      MOVW	R24,R28
    00F0D 9608      ADIW	R24,0x8
    00F0E 015C      MOVW	R10,R24
    00F0F 82B9      STD	Y+1,R11
    00F10 82A8      ST	Y,R10
    00F11 812E      LDD	R18,Y+6
    00F12 813F      LDD	R19,Y+7
    00F13 E80C      LDI	R16,0x8C
    00F14 E010      LDI	R17,0
    00F15 940E 0DAA CALL	__print
    00F17 2422      CLR	R2
    00F18 91E0 0579 LDS	R30,tmp_text+280
    00F1A 91F0 057A LDS	R31,tmp_text+281
    00F1C 8220      ST	Z,R2
    00F1D 802C      LDD	R2,Y+4
    00F1E 803D      LDD	R3,Y+5
    00F1F 9100 0579 LDS	R16,tmp_text+280
    00F21 9110 057A LDS	R17,tmp_text+281
    00F23 1902      SUB	R16,R2
    00F24 0913      SBC	R17,R3
    00F25 9622      ADIW	R28,2
    00F26 90B9      LD	R11,Y+
    00F27 90A9      LD	R10,Y+
    00F28 9624      ADIW	R28,4
    00F29 9508      RET
